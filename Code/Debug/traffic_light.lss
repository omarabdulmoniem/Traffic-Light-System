
traffic_light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ed4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00001ed4  00001f68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800068  00800068  00001f70  2**0
                  ALLOC
  3 .stab         000016d4  00000000  00000000  00001f70  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b8f  00000000  00000000  00003644  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000041d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004313  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004483  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000060cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00006fb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00007d64  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00007ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008151  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000891f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ac 36       	cpi	r26, 0x6C	; 108
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e4 ed       	ldi	r30, 0xD4	; 212
      78:	fe e1       	ldi	r31, 0x1E	; 30
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 28 06 	call	0xc50	; 0xc50 <main>
      8a:	0c 94 68 0f 	jmp	0x1ed0	; 0x1ed0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ec 0e 	jmp	0x1dd8	; 0x1dd8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 08 0f 	jmp	0x1e10	; 0x1e10 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 14 0f 	jmp	0x1e28	; 0x1e28 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 14 0f 	jmp	0x1e28	; 0x1e28 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ec 0e 	jmp	0x1dd8	; 0x1dd8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 08 0f 	jmp	0x1e10	; 0x1e10 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 14 0f 	jmp	0x1e28	; 0x1e28 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 14 0f 	jmp	0x1e28	; 0x1e28 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 14 0f 	jmp	0x1e28	; 0x1e28 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 fc 0e 	jmp	0x1df8	; 0x1df8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 18 0f 	jmp	0x1e30	; 0x1e30 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <led_init>:
#define YELLOW 2

uint16 seconds;
uint16 state;

void led_init(){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTC_ID, PIN0_ID, PIN_OUTPUT);
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 f2 06 	call	0xde4	; 0xde4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID, PIN1_ID, PIN_OUTPUT);
     b58:	82 e0       	ldi	r24, 0x02	; 2
     b5a:	61 e0       	ldi	r22, 0x01	; 1
     b5c:	41 e0       	ldi	r20, 0x01	; 1
     b5e:	0e 94 f2 06 	call	0xde4	; 0xde4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID, PIN2_ID, PIN_OUTPUT);
     b62:	82 e0       	ldi	r24, 0x02	; 2
     b64:	62 e0       	ldi	r22, 0x02	; 2
     b66:	41 e0       	ldi	r20, 0x01	; 1
     b68:	0e 94 f2 06 	call	0xde4	; 0xde4 <GPIO_setupPinDirection>
	GPIO_writePin(PORTC_ID, PIN0_ID, LOGIC_HIGH);
     b6c:	82 e0       	ldi	r24, 0x02	; 2
     b6e:	60 e0       	ldi	r22, 0x00	; 0
     b70:	41 e0       	ldi	r20, 0x01	; 1
     b72:	0e 94 dd 07 	call	0xfba	; 0xfba <GPIO_writePin>
	GPIO_writePin(PORTC_ID, PIN1_ID, LOGIC_LOW);
     b76:	82 e0       	ldi	r24, 0x02	; 2
     b78:	61 e0       	ldi	r22, 0x01	; 1
     b7a:	40 e0       	ldi	r20, 0x00	; 0
     b7c:	0e 94 dd 07 	call	0xfba	; 0xfba <GPIO_writePin>
	GPIO_writePin(PORTC_ID, PIN2_ID, LOGIC_LOW);
     b80:	82 e0       	ldi	r24, 0x02	; 2
     b82:	62 e0       	ldi	r22, 0x02	; 2
     b84:	40 e0       	ldi	r20, 0x00	; 0
     b86:	0e 94 dd 07 	call	0xfba	; 0xfba <GPIO_writePin>
}
     b8a:	cf 91       	pop	r28
     b8c:	df 91       	pop	r29
     b8e:	08 95       	ret

00000b90 <Timer1_CTC_Init>:


void Timer1_CTC_Init(unsigned char initial)
{
     b90:	df 93       	push	r29
     b92:	cf 93       	push	r28
     b94:	0f 92       	push	r0
     b96:	cd b7       	in	r28, 0x3d	; 61
     b98:	de b7       	in	r29, 0x3e	; 62
     b9a:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = initial;		/* Set timer1 initial count to zero */
     b9c:	ec e4       	ldi	r30, 0x4C	; 76
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	89 81       	ldd	r24, Y+1	; 0x01
     ba2:	88 2f       	mov	r24, r24
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	91 83       	std	Z+1, r25	; 0x01
     ba8:	80 83       	st	Z, r24

	OCR1A = 977;  		  /* each 977 tick (1sec) */
     baa:	ea e4       	ldi	r30, 0x4A	; 74
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	81 ed       	ldi	r24, 0xD1	; 209
     bb0:	93 e0       	ldi	r25, 0x03	; 3
     bb2:	91 83       	std	Z+1, r25	; 0x01
     bb4:	80 83       	st	Z, r24

	TIMSK |= (1<<OCIE1A); /* Enable Timer1 Compare A Interrupt */
     bb6:	a9 e5       	ldi	r26, 0x59	; 89
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	e9 e5       	ldi	r30, 0x59	; 89
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	80 81       	ld	r24, Z
     bc0:	80 61       	ori	r24, 0x10	; 16
     bc2:	8c 93       	st	X, r24
	/* Configure timer control register TCCR1A
	 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
	 * 2. FOC1A=1 FOC1B=0
	 * 3. CTC Mode WGM10=0 WGM11=0 (Mode Number 4)
	 */
	TCCR1A = (1<<FOC1A);
     bc4:	ef e4       	ldi	r30, 0x4F	; 79
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	88 e0       	ldi	r24, 0x08	; 8
     bca:	80 83       	st	Z, r24

	/* Configure timer control register TCCR1B
	 * 1. CTC Mode WGM12=1 WGM13=0 (Mode Number 4)
	 * 2. Prescaler = F_CPU/1024 CS10=1 CS11=0 CS12=1
	 */
	TCCR1B = (1<<WGM12) | (1<<CS10) | (1<<CS12);
     bcc:	ee e4       	ldi	r30, 0x4E	; 78
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	8d e0       	ldi	r24, 0x0D	; 13
     bd2:	80 83       	st	Z, r24
}
     bd4:	0f 90       	pop	r0
     bd6:	cf 91       	pop	r28
     bd8:	df 91       	pop	r29
     bda:	08 95       	ret

00000bdc <__vector_6>:


ISR(TIMER1_COMPA_vect){
     bdc:	1f 92       	push	r1
     bde:	0f 92       	push	r0
     be0:	0f b6       	in	r0, 0x3f	; 63
     be2:	0f 92       	push	r0
     be4:	11 24       	eor	r1, r1
     be6:	2f 93       	push	r18
     be8:	3f 93       	push	r19
     bea:	4f 93       	push	r20
     bec:	5f 93       	push	r21
     bee:	6f 93       	push	r22
     bf0:	7f 93       	push	r23
     bf2:	8f 93       	push	r24
     bf4:	9f 93       	push	r25
     bf6:	af 93       	push	r26
     bf8:	bf 93       	push	r27
     bfa:	ef 93       	push	r30
     bfc:	ff 93       	push	r31
     bfe:	df 93       	push	r29
     c00:	cf 93       	push	r28
     c02:	cd b7       	in	r28, 0x3d	; 61
     c04:	de b7       	in	r29, 0x3e	; 62
	seconds--;
     c06:	80 91 6a 00 	lds	r24, 0x006A
     c0a:	90 91 6b 00 	lds	r25, 0x006B
     c0e:	01 97       	sbiw	r24, 0x01	; 1
     c10:	90 93 6b 00 	sts	0x006B, r25
     c14:	80 93 6a 00 	sts	0x006A, r24
	if(seconds == 9) LCD_clearScreen();
     c18:	80 91 6a 00 	lds	r24, 0x006A
     c1c:	90 91 6b 00 	lds	r25, 0x006B
     c20:	89 30       	cpi	r24, 0x09	; 9
     c22:	91 05       	cpc	r25, r1
     c24:	11 f4       	brne	.+4      	; 0xc2a <__vector_6+0x4e>
     c26:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <LCD_clearScreen>
}
     c2a:	cf 91       	pop	r28
     c2c:	df 91       	pop	r29
     c2e:	ff 91       	pop	r31
     c30:	ef 91       	pop	r30
     c32:	bf 91       	pop	r27
     c34:	af 91       	pop	r26
     c36:	9f 91       	pop	r25
     c38:	8f 91       	pop	r24
     c3a:	7f 91       	pop	r23
     c3c:	6f 91       	pop	r22
     c3e:	5f 91       	pop	r21
     c40:	4f 91       	pop	r20
     c42:	3f 91       	pop	r19
     c44:	2f 91       	pop	r18
     c46:	0f 90       	pop	r0
     c48:	0f be       	out	0x3f, r0	; 63
     c4a:	0f 90       	pop	r0
     c4c:	1f 90       	pop	r1
     c4e:	18 95       	reti

00000c50 <main>:

int main(void){
     c50:	df 93       	push	r29
     c52:	cf 93       	push	r28
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
	LCD_init(); /* initialize LCD driver */
     c58:	0e 94 30 0a 	call	0x1460	; 0x1460 <LCD_init>
	led_init();
     c5c:	0e 94 a3 05 	call	0xb46	; 0xb46 <led_init>
	SREG |= (1<<7); /* Enable global interrupts in MC */
     c60:	af e5       	ldi	r26, 0x5F	; 95
     c62:	b0 e0       	ldi	r27, 0x00	; 0
     c64:	ef e5       	ldi	r30, 0x5F	; 95
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	80 68       	ori	r24, 0x80	; 128
     c6c:	8c 93       	st	X, r24
	seconds = 30;
     c6e:	8e e1       	ldi	r24, 0x1E	; 30
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	90 93 6b 00 	sts	0x006B, r25
     c76:	80 93 6a 00 	sts	0x006A, r24
	state = RED;
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	90 93 69 00 	sts	0x0069, r25
     c82:	80 93 68 00 	sts	0x0068, r24
	LCD_moveCursor(0,1);
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <LCD_moveCursor>
	LCD_intgerToString(seconds);
     c8e:	80 91 6a 00 	lds	r24, 0x006A
     c92:	90 91 6b 00 	lds	r25, 0x006B
     c96:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <LCD_intgerToString>

	Timer1_CTC_Init(0);
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	0e 94 c8 05 	call	0xb90	; 0xb90 <Timer1_CTC_Init>

	while(1)
	{
		LCD_moveCursor(0,1);
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	61 e0       	ldi	r22, 0x01	; 1
     ca4:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <LCD_moveCursor>
		LCD_intgerToString(seconds);
     ca8:	80 91 6a 00 	lds	r24, 0x006A
     cac:	90 91 6b 00 	lds	r25, 0x006B
     cb0:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <LCD_intgerToString>
		if(seconds == 0 && state == GREEN)
     cb4:	80 91 6a 00 	lds	r24, 0x006A
     cb8:	90 91 6b 00 	lds	r25, 0x006B
     cbc:	00 97       	sbiw	r24, 0x00	; 0
     cbe:	61 f5       	brne	.+88     	; 0xd18 <main+0xc8>
     cc0:	80 91 68 00 	lds	r24, 0x0068
     cc4:	90 91 69 00 	lds	r25, 0x0069
     cc8:	00 97       	sbiw	r24, 0x00	; 0
     cca:	31 f5       	brne	.+76     	; 0xd18 <main+0xc8>
		{
			seconds = 5;
     ccc:	85 e0       	ldi	r24, 0x05	; 5
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	90 93 6b 00 	sts	0x006B, r25
     cd4:	80 93 6a 00 	sts	0x006A, r24
			state = YELLOW;
     cd8:	82 e0       	ldi	r24, 0x02	; 2
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	90 93 69 00 	sts	0x0069, r25
     ce0:	80 93 68 00 	sts	0x0068, r24
			GPIO_writePin(PORTC_ID, PIN0_ID, LOGIC_LOW);
     ce4:	82 e0       	ldi	r24, 0x02	; 2
     ce6:	60 e0       	ldi	r22, 0x00	; 0
     ce8:	40 e0       	ldi	r20, 0x00	; 0
     cea:	0e 94 dd 07 	call	0xfba	; 0xfba <GPIO_writePin>
			GPIO_writePin(PORTC_ID, PIN1_ID, LOGIC_HIGH);
     cee:	82 e0       	ldi	r24, 0x02	; 2
     cf0:	61 e0       	ldi	r22, 0x01	; 1
     cf2:	41 e0       	ldi	r20, 0x01	; 1
     cf4:	0e 94 dd 07 	call	0xfba	; 0xfba <GPIO_writePin>
			GPIO_writePin(PORTC_ID, PIN2_ID, LOGIC_LOW);
     cf8:	82 e0       	ldi	r24, 0x02	; 2
     cfa:	62 e0       	ldi	r22, 0x02	; 2
     cfc:	40 e0       	ldi	r20, 0x00	; 0
     cfe:	0e 94 dd 07 	call	0xfba	; 0xfba <GPIO_writePin>
			LCD_moveCursor(0,1);
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	61 e0       	ldi	r22, 0x01	; 1
     d06:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <LCD_moveCursor>
			LCD_intgerToString(seconds);
     d0a:	80 91 6a 00 	lds	r24, 0x006A
     d0e:	90 91 6b 00 	lds	r25, 0x006B
     d12:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <LCD_intgerToString>
     d16:	c4 cf       	rjmp	.-120    	; 0xca0 <main+0x50>

		}
		else if(seconds == 0 && state == YELLOW)
     d18:	80 91 6a 00 	lds	r24, 0x006A
     d1c:	90 91 6b 00 	lds	r25, 0x006B
     d20:	00 97       	sbiw	r24, 0x00	; 0
     d22:	69 f5       	brne	.+90     	; 0xd7e <main+0x12e>
     d24:	80 91 68 00 	lds	r24, 0x0068
     d28:	90 91 69 00 	lds	r25, 0x0069
     d2c:	82 30       	cpi	r24, 0x02	; 2
     d2e:	91 05       	cpc	r25, r1
     d30:	31 f5       	brne	.+76     	; 0xd7e <main+0x12e>
		{
			seconds = 30;
     d32:	8e e1       	ldi	r24, 0x1E	; 30
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	90 93 6b 00 	sts	0x006B, r25
     d3a:	80 93 6a 00 	sts	0x006A, r24
			state = RED;
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	90 93 69 00 	sts	0x0069, r25
     d46:	80 93 68 00 	sts	0x0068, r24
			GPIO_writePin(PORTC_ID, PIN0_ID, LOGIC_HIGH);
     d4a:	82 e0       	ldi	r24, 0x02	; 2
     d4c:	60 e0       	ldi	r22, 0x00	; 0
     d4e:	41 e0       	ldi	r20, 0x01	; 1
     d50:	0e 94 dd 07 	call	0xfba	; 0xfba <GPIO_writePin>
			GPIO_writePin(PORTC_ID, PIN1_ID, LOGIC_LOW);
     d54:	82 e0       	ldi	r24, 0x02	; 2
     d56:	61 e0       	ldi	r22, 0x01	; 1
     d58:	40 e0       	ldi	r20, 0x00	; 0
     d5a:	0e 94 dd 07 	call	0xfba	; 0xfba <GPIO_writePin>
			GPIO_writePin(PORTC_ID, PIN2_ID, LOGIC_LOW);
     d5e:	82 e0       	ldi	r24, 0x02	; 2
     d60:	62 e0       	ldi	r22, 0x02	; 2
     d62:	40 e0       	ldi	r20, 0x00	; 0
     d64:	0e 94 dd 07 	call	0xfba	; 0xfba <GPIO_writePin>
			LCD_moveCursor(0,1);
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	61 e0       	ldi	r22, 0x01	; 1
     d6c:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <LCD_moveCursor>
			LCD_intgerToString(seconds);
     d70:	80 91 6a 00 	lds	r24, 0x006A
     d74:	90 91 6b 00 	lds	r25, 0x006B
     d78:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <LCD_intgerToString>
     d7c:	91 cf       	rjmp	.-222    	; 0xca0 <main+0x50>
		}
		else if(seconds == 0 && state == RED)
     d7e:	80 91 6a 00 	lds	r24, 0x006A
     d82:	90 91 6b 00 	lds	r25, 0x006B
     d86:	00 97       	sbiw	r24, 0x00	; 0
     d88:	09 f0       	breq	.+2      	; 0xd8c <main+0x13c>
     d8a:	8a cf       	rjmp	.-236    	; 0xca0 <main+0x50>
     d8c:	80 91 68 00 	lds	r24, 0x0068
     d90:	90 91 69 00 	lds	r25, 0x0069
     d94:	81 30       	cpi	r24, 0x01	; 1
     d96:	91 05       	cpc	r25, r1
     d98:	09 f0       	breq	.+2      	; 0xd9c <main+0x14c>
     d9a:	82 cf       	rjmp	.-252    	; 0xca0 <main+0x50>
		{
			seconds = 20;
     d9c:	84 e1       	ldi	r24, 0x14	; 20
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	90 93 6b 00 	sts	0x006B, r25
     da4:	80 93 6a 00 	sts	0x006A, r24
			state = GREEN;
     da8:	10 92 69 00 	sts	0x0069, r1
     dac:	10 92 68 00 	sts	0x0068, r1
			GPIO_writePin(PORTC_ID, PIN0_ID, LOGIC_LOW);
     db0:	82 e0       	ldi	r24, 0x02	; 2
     db2:	60 e0       	ldi	r22, 0x00	; 0
     db4:	40 e0       	ldi	r20, 0x00	; 0
     db6:	0e 94 dd 07 	call	0xfba	; 0xfba <GPIO_writePin>
			GPIO_writePin(PORTC_ID, PIN1_ID, LOGIC_LOW);
     dba:	82 e0       	ldi	r24, 0x02	; 2
     dbc:	61 e0       	ldi	r22, 0x01	; 1
     dbe:	40 e0       	ldi	r20, 0x00	; 0
     dc0:	0e 94 dd 07 	call	0xfba	; 0xfba <GPIO_writePin>
			GPIO_writePin(PORTC_ID, PIN2_ID, LOGIC_HIGH);
     dc4:	82 e0       	ldi	r24, 0x02	; 2
     dc6:	62 e0       	ldi	r22, 0x02	; 2
     dc8:	41 e0       	ldi	r20, 0x01	; 1
     dca:	0e 94 dd 07 	call	0xfba	; 0xfba <GPIO_writePin>
			LCD_moveCursor(0,1);
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	61 e0       	ldi	r22, 0x01	; 1
     dd2:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <LCD_moveCursor>
			LCD_intgerToString(seconds);
     dd6:	80 91 6a 00 	lds	r24, 0x006A
     dda:	90 91 6b 00 	lds	r25, 0x006B
     dde:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <LCD_intgerToString>
     de2:	5e cf       	rjmp	.-324    	; 0xca0 <main+0x50>

00000de4 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     de4:	df 93       	push	r29
     de6:	cf 93       	push	r28
     de8:	00 d0       	rcall	.+0      	; 0xdea <GPIO_setupPinDirection+0x6>
     dea:	00 d0       	rcall	.+0      	; 0xdec <GPIO_setupPinDirection+0x8>
     dec:	0f 92       	push	r0
     dee:	cd b7       	in	r28, 0x3d	; 61
     df0:	de b7       	in	r29, 0x3e	; 62
     df2:	89 83       	std	Y+1, r24	; 0x01
     df4:	6a 83       	std	Y+2, r22	; 0x02
     df6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     df8:	8a 81       	ldd	r24, Y+2	; 0x02
     dfa:	88 30       	cpi	r24, 0x08	; 8
     dfc:	08 f0       	brcs	.+2      	; 0xe00 <GPIO_setupPinDirection+0x1c>
     dfe:	d5 c0       	rjmp	.+426    	; 0xfaa <GPIO_setupPinDirection+0x1c6>
     e00:	89 81       	ldd	r24, Y+1	; 0x01
     e02:	84 30       	cpi	r24, 0x04	; 4
     e04:	08 f0       	brcs	.+2      	; 0xe08 <GPIO_setupPinDirection+0x24>
     e06:	d1 c0       	rjmp	.+418    	; 0xfaa <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     e08:	89 81       	ldd	r24, Y+1	; 0x01
     e0a:	28 2f       	mov	r18, r24
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	3d 83       	std	Y+5, r19	; 0x05
     e10:	2c 83       	std	Y+4, r18	; 0x04
     e12:	8c 81       	ldd	r24, Y+4	; 0x04
     e14:	9d 81       	ldd	r25, Y+5	; 0x05
     e16:	81 30       	cpi	r24, 0x01	; 1
     e18:	91 05       	cpc	r25, r1
     e1a:	09 f4       	brne	.+2      	; 0xe1e <GPIO_setupPinDirection+0x3a>
     e1c:	43 c0       	rjmp	.+134    	; 0xea4 <GPIO_setupPinDirection+0xc0>
     e1e:	2c 81       	ldd	r18, Y+4	; 0x04
     e20:	3d 81       	ldd	r19, Y+5	; 0x05
     e22:	22 30       	cpi	r18, 0x02	; 2
     e24:	31 05       	cpc	r19, r1
     e26:	2c f4       	brge	.+10     	; 0xe32 <GPIO_setupPinDirection+0x4e>
     e28:	8c 81       	ldd	r24, Y+4	; 0x04
     e2a:	9d 81       	ldd	r25, Y+5	; 0x05
     e2c:	00 97       	sbiw	r24, 0x00	; 0
     e2e:	71 f0       	breq	.+28     	; 0xe4c <GPIO_setupPinDirection+0x68>
     e30:	bc c0       	rjmp	.+376    	; 0xfaa <GPIO_setupPinDirection+0x1c6>
     e32:	2c 81       	ldd	r18, Y+4	; 0x04
     e34:	3d 81       	ldd	r19, Y+5	; 0x05
     e36:	22 30       	cpi	r18, 0x02	; 2
     e38:	31 05       	cpc	r19, r1
     e3a:	09 f4       	brne	.+2      	; 0xe3e <GPIO_setupPinDirection+0x5a>
     e3c:	5f c0       	rjmp	.+190    	; 0xefc <GPIO_setupPinDirection+0x118>
     e3e:	8c 81       	ldd	r24, Y+4	; 0x04
     e40:	9d 81       	ldd	r25, Y+5	; 0x05
     e42:	83 30       	cpi	r24, 0x03	; 3
     e44:	91 05       	cpc	r25, r1
     e46:	09 f4       	brne	.+2      	; 0xe4a <GPIO_setupPinDirection+0x66>
     e48:	85 c0       	rjmp	.+266    	; 0xf54 <GPIO_setupPinDirection+0x170>
     e4a:	af c0       	rjmp	.+350    	; 0xfaa <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     e4c:	8b 81       	ldd	r24, Y+3	; 0x03
     e4e:	81 30       	cpi	r24, 0x01	; 1
     e50:	a1 f4       	brne	.+40     	; 0xe7a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     e52:	aa e3       	ldi	r26, 0x3A	; 58
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	ea e3       	ldi	r30, 0x3A	; 58
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	48 2f       	mov	r20, r24
     e5e:	8a 81       	ldd	r24, Y+2	; 0x02
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	02 2e       	mov	r0, r18
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <GPIO_setupPinDirection+0x8c>
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	0a 94       	dec	r0
     e72:	e2 f7       	brpl	.-8      	; 0xe6c <GPIO_setupPinDirection+0x88>
     e74:	84 2b       	or	r24, r20
     e76:	8c 93       	st	X, r24
     e78:	98 c0       	rjmp	.+304    	; 0xfaa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     e7a:	aa e3       	ldi	r26, 0x3A	; 58
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	ea e3       	ldi	r30, 0x3A	; 58
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	48 2f       	mov	r20, r24
     e86:	8a 81       	ldd	r24, Y+2	; 0x02
     e88:	28 2f       	mov	r18, r24
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	02 2e       	mov	r0, r18
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <GPIO_setupPinDirection+0xb4>
     e94:	88 0f       	add	r24, r24
     e96:	99 1f       	adc	r25, r25
     e98:	0a 94       	dec	r0
     e9a:	e2 f7       	brpl	.-8      	; 0xe94 <GPIO_setupPinDirection+0xb0>
     e9c:	80 95       	com	r24
     e9e:	84 23       	and	r24, r20
     ea0:	8c 93       	st	X, r24
     ea2:	83 c0       	rjmp	.+262    	; 0xfaa <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     ea4:	8b 81       	ldd	r24, Y+3	; 0x03
     ea6:	81 30       	cpi	r24, 0x01	; 1
     ea8:	a1 f4       	brne	.+40     	; 0xed2 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     eaa:	a7 e3       	ldi	r26, 0x37	; 55
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e7 e3       	ldi	r30, 0x37	; 55
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	48 2f       	mov	r20, r24
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	02 2e       	mov	r0, r18
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <GPIO_setupPinDirection+0xe4>
     ec4:	88 0f       	add	r24, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	0a 94       	dec	r0
     eca:	e2 f7       	brpl	.-8      	; 0xec4 <GPIO_setupPinDirection+0xe0>
     ecc:	84 2b       	or	r24, r20
     ece:	8c 93       	st	X, r24
     ed0:	6c c0       	rjmp	.+216    	; 0xfaa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     ed2:	a7 e3       	ldi	r26, 0x37	; 55
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e7 e3       	ldi	r30, 0x37	; 55
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	48 2f       	mov	r20, r24
     ede:	8a 81       	ldd	r24, Y+2	; 0x02
     ee0:	28 2f       	mov	r18, r24
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	02 2e       	mov	r0, r18
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <GPIO_setupPinDirection+0x10c>
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	0a 94       	dec	r0
     ef2:	e2 f7       	brpl	.-8      	; 0xeec <GPIO_setupPinDirection+0x108>
     ef4:	80 95       	com	r24
     ef6:	84 23       	and	r24, r20
     ef8:	8c 93       	st	X, r24
     efa:	57 c0       	rjmp	.+174    	; 0xfaa <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     efc:	8b 81       	ldd	r24, Y+3	; 0x03
     efe:	81 30       	cpi	r24, 0x01	; 1
     f00:	a1 f4       	brne	.+40     	; 0xf2a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     f02:	a4 e3       	ldi	r26, 0x34	; 52
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e4 e3       	ldi	r30, 0x34	; 52
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	48 2f       	mov	r20, r24
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	28 2f       	mov	r18, r24
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	02 2e       	mov	r0, r18
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <GPIO_setupPinDirection+0x13c>
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	0a 94       	dec	r0
     f22:	e2 f7       	brpl	.-8      	; 0xf1c <GPIO_setupPinDirection+0x138>
     f24:	84 2b       	or	r24, r20
     f26:	8c 93       	st	X, r24
     f28:	40 c0       	rjmp	.+128    	; 0xfaa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     f2a:	a4 e3       	ldi	r26, 0x34	; 52
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e4 e3       	ldi	r30, 0x34	; 52
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	48 2f       	mov	r20, r24
     f36:	8a 81       	ldd	r24, Y+2	; 0x02
     f38:	28 2f       	mov	r18, r24
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	02 2e       	mov	r0, r18
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <GPIO_setupPinDirection+0x164>
     f44:	88 0f       	add	r24, r24
     f46:	99 1f       	adc	r25, r25
     f48:	0a 94       	dec	r0
     f4a:	e2 f7       	brpl	.-8      	; 0xf44 <GPIO_setupPinDirection+0x160>
     f4c:	80 95       	com	r24
     f4e:	84 23       	and	r24, r20
     f50:	8c 93       	st	X, r24
     f52:	2b c0       	rjmp	.+86     	; 0xfaa <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     f54:	8b 81       	ldd	r24, Y+3	; 0x03
     f56:	81 30       	cpi	r24, 0x01	; 1
     f58:	a1 f4       	brne	.+40     	; 0xf82 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     f5a:	a1 e3       	ldi	r26, 0x31	; 49
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e1 e3       	ldi	r30, 0x31	; 49
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	48 2f       	mov	r20, r24
     f66:	8a 81       	ldd	r24, Y+2	; 0x02
     f68:	28 2f       	mov	r18, r24
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	02 2e       	mov	r0, r18
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <GPIO_setupPinDirection+0x194>
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	0a 94       	dec	r0
     f7a:	e2 f7       	brpl	.-8      	; 0xf74 <GPIO_setupPinDirection+0x190>
     f7c:	84 2b       	or	r24, r20
     f7e:	8c 93       	st	X, r24
     f80:	14 c0       	rjmp	.+40     	; 0xfaa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     f82:	a1 e3       	ldi	r26, 0x31	; 49
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	e1 e3       	ldi	r30, 0x31	; 49
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	48 2f       	mov	r20, r24
     f8e:	8a 81       	ldd	r24, Y+2	; 0x02
     f90:	28 2f       	mov	r18, r24
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	02 2e       	mov	r0, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <GPIO_setupPinDirection+0x1bc>
     f9c:	88 0f       	add	r24, r24
     f9e:	99 1f       	adc	r25, r25
     fa0:	0a 94       	dec	r0
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <GPIO_setupPinDirection+0x1b8>
     fa4:	80 95       	com	r24
     fa6:	84 23       	and	r24, r20
     fa8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     faa:	0f 90       	pop	r0
     fac:	0f 90       	pop	r0
     fae:	0f 90       	pop	r0
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	cf 91       	pop	r28
     fb6:	df 91       	pop	r29
     fb8:	08 95       	ret

00000fba <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     fba:	df 93       	push	r29
     fbc:	cf 93       	push	r28
     fbe:	00 d0       	rcall	.+0      	; 0xfc0 <GPIO_writePin+0x6>
     fc0:	00 d0       	rcall	.+0      	; 0xfc2 <GPIO_writePin+0x8>
     fc2:	0f 92       	push	r0
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
     fc8:	89 83       	std	Y+1, r24	; 0x01
     fca:	6a 83       	std	Y+2, r22	; 0x02
     fcc:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     fce:	8a 81       	ldd	r24, Y+2	; 0x02
     fd0:	88 30       	cpi	r24, 0x08	; 8
     fd2:	08 f0       	brcs	.+2      	; 0xfd6 <GPIO_writePin+0x1c>
     fd4:	d5 c0       	rjmp	.+426    	; 0x1180 <GPIO_writePin+0x1c6>
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
     fd8:	84 30       	cpi	r24, 0x04	; 4
     fda:	08 f0       	brcs	.+2      	; 0xfde <GPIO_writePin+0x24>
     fdc:	d1 c0       	rjmp	.+418    	; 0x1180 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     fde:	89 81       	ldd	r24, Y+1	; 0x01
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	3d 83       	std	Y+5, r19	; 0x05
     fe6:	2c 83       	std	Y+4, r18	; 0x04
     fe8:	8c 81       	ldd	r24, Y+4	; 0x04
     fea:	9d 81       	ldd	r25, Y+5	; 0x05
     fec:	81 30       	cpi	r24, 0x01	; 1
     fee:	91 05       	cpc	r25, r1
     ff0:	09 f4       	brne	.+2      	; 0xff4 <GPIO_writePin+0x3a>
     ff2:	43 c0       	rjmp	.+134    	; 0x107a <GPIO_writePin+0xc0>
     ff4:	2c 81       	ldd	r18, Y+4	; 0x04
     ff6:	3d 81       	ldd	r19, Y+5	; 0x05
     ff8:	22 30       	cpi	r18, 0x02	; 2
     ffa:	31 05       	cpc	r19, r1
     ffc:	2c f4       	brge	.+10     	; 0x1008 <GPIO_writePin+0x4e>
     ffe:	8c 81       	ldd	r24, Y+4	; 0x04
    1000:	9d 81       	ldd	r25, Y+5	; 0x05
    1002:	00 97       	sbiw	r24, 0x00	; 0
    1004:	71 f0       	breq	.+28     	; 0x1022 <GPIO_writePin+0x68>
    1006:	bc c0       	rjmp	.+376    	; 0x1180 <GPIO_writePin+0x1c6>
    1008:	2c 81       	ldd	r18, Y+4	; 0x04
    100a:	3d 81       	ldd	r19, Y+5	; 0x05
    100c:	22 30       	cpi	r18, 0x02	; 2
    100e:	31 05       	cpc	r19, r1
    1010:	09 f4       	brne	.+2      	; 0x1014 <GPIO_writePin+0x5a>
    1012:	5f c0       	rjmp	.+190    	; 0x10d2 <GPIO_writePin+0x118>
    1014:	8c 81       	ldd	r24, Y+4	; 0x04
    1016:	9d 81       	ldd	r25, Y+5	; 0x05
    1018:	83 30       	cpi	r24, 0x03	; 3
    101a:	91 05       	cpc	r25, r1
    101c:	09 f4       	brne	.+2      	; 0x1020 <GPIO_writePin+0x66>
    101e:	85 c0       	rjmp	.+266    	; 0x112a <GPIO_writePin+0x170>
    1020:	af c0       	rjmp	.+350    	; 0x1180 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1022:	8b 81       	ldd	r24, Y+3	; 0x03
    1024:	81 30       	cpi	r24, 0x01	; 1
    1026:	a1 f4       	brne	.+40     	; 0x1050 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1028:	ab e3       	ldi	r26, 0x3B	; 59
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	eb e3       	ldi	r30, 0x3B	; 59
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	48 2f       	mov	r20, r24
    1034:	8a 81       	ldd	r24, Y+2	; 0x02
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	02 2e       	mov	r0, r18
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <GPIO_writePin+0x8c>
    1042:	88 0f       	add	r24, r24
    1044:	99 1f       	adc	r25, r25
    1046:	0a 94       	dec	r0
    1048:	e2 f7       	brpl	.-8      	; 0x1042 <GPIO_writePin+0x88>
    104a:	84 2b       	or	r24, r20
    104c:	8c 93       	st	X, r24
    104e:	98 c0       	rjmp	.+304    	; 0x1180 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1050:	ab e3       	ldi	r26, 0x3B	; 59
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	eb e3       	ldi	r30, 0x3B	; 59
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	48 2f       	mov	r20, r24
    105c:	8a 81       	ldd	r24, Y+2	; 0x02
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	02 2e       	mov	r0, r18
    1068:	02 c0       	rjmp	.+4      	; 0x106e <GPIO_writePin+0xb4>
    106a:	88 0f       	add	r24, r24
    106c:	99 1f       	adc	r25, r25
    106e:	0a 94       	dec	r0
    1070:	e2 f7       	brpl	.-8      	; 0x106a <GPIO_writePin+0xb0>
    1072:	80 95       	com	r24
    1074:	84 23       	and	r24, r20
    1076:	8c 93       	st	X, r24
    1078:	83 c0       	rjmp	.+262    	; 0x1180 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    107a:	8b 81       	ldd	r24, Y+3	; 0x03
    107c:	81 30       	cpi	r24, 0x01	; 1
    107e:	a1 f4       	brne	.+40     	; 0x10a8 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1080:	a8 e3       	ldi	r26, 0x38	; 56
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	e8 e3       	ldi	r30, 0x38	; 56
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	48 2f       	mov	r20, r24
    108c:	8a 81       	ldd	r24, Y+2	; 0x02
    108e:	28 2f       	mov	r18, r24
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	02 2e       	mov	r0, r18
    1098:	02 c0       	rjmp	.+4      	; 0x109e <GPIO_writePin+0xe4>
    109a:	88 0f       	add	r24, r24
    109c:	99 1f       	adc	r25, r25
    109e:	0a 94       	dec	r0
    10a0:	e2 f7       	brpl	.-8      	; 0x109a <GPIO_writePin+0xe0>
    10a2:	84 2b       	or	r24, r20
    10a4:	8c 93       	st	X, r24
    10a6:	6c c0       	rjmp	.+216    	; 0x1180 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    10a8:	a8 e3       	ldi	r26, 0x38	; 56
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	e8 e3       	ldi	r30, 0x38	; 56
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	48 2f       	mov	r20, r24
    10b4:	8a 81       	ldd	r24, Y+2	; 0x02
    10b6:	28 2f       	mov	r18, r24
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	02 2e       	mov	r0, r18
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <GPIO_writePin+0x10c>
    10c2:	88 0f       	add	r24, r24
    10c4:	99 1f       	adc	r25, r25
    10c6:	0a 94       	dec	r0
    10c8:	e2 f7       	brpl	.-8      	; 0x10c2 <GPIO_writePin+0x108>
    10ca:	80 95       	com	r24
    10cc:	84 23       	and	r24, r20
    10ce:	8c 93       	st	X, r24
    10d0:	57 c0       	rjmp	.+174    	; 0x1180 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    10d2:	8b 81       	ldd	r24, Y+3	; 0x03
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	a1 f4       	brne	.+40     	; 0x1100 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    10d8:	a5 e3       	ldi	r26, 0x35	; 53
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	e5 e3       	ldi	r30, 0x35	; 53
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	48 2f       	mov	r20, r24
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	02 2e       	mov	r0, r18
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <GPIO_writePin+0x13c>
    10f2:	88 0f       	add	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	0a 94       	dec	r0
    10f8:	e2 f7       	brpl	.-8      	; 0x10f2 <GPIO_writePin+0x138>
    10fa:	84 2b       	or	r24, r20
    10fc:	8c 93       	st	X, r24
    10fe:	40 c0       	rjmp	.+128    	; 0x1180 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1100:	a5 e3       	ldi	r26, 0x35	; 53
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e5 e3       	ldi	r30, 0x35	; 53
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	48 2f       	mov	r20, r24
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	28 2f       	mov	r18, r24
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	02 2e       	mov	r0, r18
    1118:	02 c0       	rjmp	.+4      	; 0x111e <GPIO_writePin+0x164>
    111a:	88 0f       	add	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	0a 94       	dec	r0
    1120:	e2 f7       	brpl	.-8      	; 0x111a <GPIO_writePin+0x160>
    1122:	80 95       	com	r24
    1124:	84 23       	and	r24, r20
    1126:	8c 93       	st	X, r24
    1128:	2b c0       	rjmp	.+86     	; 0x1180 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    112a:	8b 81       	ldd	r24, Y+3	; 0x03
    112c:	81 30       	cpi	r24, 0x01	; 1
    112e:	a1 f4       	brne	.+40     	; 0x1158 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1130:	a2 e3       	ldi	r26, 0x32	; 50
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	e2 e3       	ldi	r30, 0x32	; 50
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	48 2f       	mov	r20, r24
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	02 2e       	mov	r0, r18
    1148:	02 c0       	rjmp	.+4      	; 0x114e <GPIO_writePin+0x194>
    114a:	88 0f       	add	r24, r24
    114c:	99 1f       	adc	r25, r25
    114e:	0a 94       	dec	r0
    1150:	e2 f7       	brpl	.-8      	; 0x114a <GPIO_writePin+0x190>
    1152:	84 2b       	or	r24, r20
    1154:	8c 93       	st	X, r24
    1156:	14 c0       	rjmp	.+40     	; 0x1180 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1158:	a2 e3       	ldi	r26, 0x32	; 50
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e2 e3       	ldi	r30, 0x32	; 50
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	48 2f       	mov	r20, r24
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	02 2e       	mov	r0, r18
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <GPIO_writePin+0x1bc>
    1172:	88 0f       	add	r24, r24
    1174:	99 1f       	adc	r25, r25
    1176:	0a 94       	dec	r0
    1178:	e2 f7       	brpl	.-8      	; 0x1172 <GPIO_writePin+0x1b8>
    117a:	80 95       	com	r24
    117c:	84 23       	and	r24, r20
    117e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1180:	0f 90       	pop	r0
    1182:	0f 90       	pop	r0
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	cf 91       	pop	r28
    118c:	df 91       	pop	r29
    118e:	08 95       	ret

00001190 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1190:	df 93       	push	r29
    1192:	cf 93       	push	r28
    1194:	00 d0       	rcall	.+0      	; 0x1196 <GPIO_readPin+0x6>
    1196:	00 d0       	rcall	.+0      	; 0x1198 <GPIO_readPin+0x8>
    1198:	0f 92       	push	r0
    119a:	cd b7       	in	r28, 0x3d	; 61
    119c:	de b7       	in	r29, 0x3e	; 62
    119e:	8a 83       	std	Y+2, r24	; 0x02
    11a0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    11a2:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	88 30       	cpi	r24, 0x08	; 8
    11a8:	08 f0       	brcs	.+2      	; 0x11ac <GPIO_readPin+0x1c>
    11aa:	84 c0       	rjmp	.+264    	; 0x12b4 <GPIO_readPin+0x124>
    11ac:	8a 81       	ldd	r24, Y+2	; 0x02
    11ae:	84 30       	cpi	r24, 0x04	; 4
    11b0:	08 f0       	brcs	.+2      	; 0x11b4 <GPIO_readPin+0x24>
    11b2:	80 c0       	rjmp	.+256    	; 0x12b4 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	3d 83       	std	Y+5, r19	; 0x05
    11bc:	2c 83       	std	Y+4, r18	; 0x04
    11be:	4c 81       	ldd	r20, Y+4	; 0x04
    11c0:	5d 81       	ldd	r21, Y+5	; 0x05
    11c2:	41 30       	cpi	r20, 0x01	; 1
    11c4:	51 05       	cpc	r21, r1
    11c6:	79 f1       	breq	.+94     	; 0x1226 <GPIO_readPin+0x96>
    11c8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ca:	9d 81       	ldd	r25, Y+5	; 0x05
    11cc:	82 30       	cpi	r24, 0x02	; 2
    11ce:	91 05       	cpc	r25, r1
    11d0:	34 f4       	brge	.+12     	; 0x11de <GPIO_readPin+0x4e>
    11d2:	2c 81       	ldd	r18, Y+4	; 0x04
    11d4:	3d 81       	ldd	r19, Y+5	; 0x05
    11d6:	21 15       	cp	r18, r1
    11d8:	31 05       	cpc	r19, r1
    11da:	69 f0       	breq	.+26     	; 0x11f6 <GPIO_readPin+0x66>
    11dc:	6b c0       	rjmp	.+214    	; 0x12b4 <GPIO_readPin+0x124>
    11de:	4c 81       	ldd	r20, Y+4	; 0x04
    11e0:	5d 81       	ldd	r21, Y+5	; 0x05
    11e2:	42 30       	cpi	r20, 0x02	; 2
    11e4:	51 05       	cpc	r21, r1
    11e6:	b9 f1       	breq	.+110    	; 0x1256 <GPIO_readPin+0xc6>
    11e8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ea:	9d 81       	ldd	r25, Y+5	; 0x05
    11ec:	83 30       	cpi	r24, 0x03	; 3
    11ee:	91 05       	cpc	r25, r1
    11f0:	09 f4       	brne	.+2      	; 0x11f4 <GPIO_readPin+0x64>
    11f2:	49 c0       	rjmp	.+146    	; 0x1286 <GPIO_readPin+0xf6>
    11f4:	5f c0       	rjmp	.+190    	; 0x12b4 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    11f6:	e9 e3       	ldi	r30, 0x39	; 57
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	8b 81       	ldd	r24, Y+3	; 0x03
    1202:	88 2f       	mov	r24, r24
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	a9 01       	movw	r20, r18
    1208:	02 c0       	rjmp	.+4      	; 0x120e <GPIO_readPin+0x7e>
    120a:	55 95       	asr	r21
    120c:	47 95       	ror	r20
    120e:	8a 95       	dec	r24
    1210:	e2 f7       	brpl	.-8      	; 0x120a <GPIO_readPin+0x7a>
    1212:	ca 01       	movw	r24, r20
    1214:	81 70       	andi	r24, 0x01	; 1
    1216:	90 70       	andi	r25, 0x00	; 0
    1218:	88 23       	and	r24, r24
    121a:	19 f0       	breq	.+6      	; 0x1222 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	89 83       	std	Y+1, r24	; 0x01
    1220:	49 c0       	rjmp	.+146    	; 0x12b4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1222:	19 82       	std	Y+1, r1	; 0x01
    1224:	47 c0       	rjmp	.+142    	; 0x12b4 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1226:	e6 e3       	ldi	r30, 0x36	; 54
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	28 2f       	mov	r18, r24
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	88 2f       	mov	r24, r24
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	a9 01       	movw	r20, r18
    1238:	02 c0       	rjmp	.+4      	; 0x123e <GPIO_readPin+0xae>
    123a:	55 95       	asr	r21
    123c:	47 95       	ror	r20
    123e:	8a 95       	dec	r24
    1240:	e2 f7       	brpl	.-8      	; 0x123a <GPIO_readPin+0xaa>
    1242:	ca 01       	movw	r24, r20
    1244:	81 70       	andi	r24, 0x01	; 1
    1246:	90 70       	andi	r25, 0x00	; 0
    1248:	88 23       	and	r24, r24
    124a:	19 f0       	breq	.+6      	; 0x1252 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	89 83       	std	Y+1, r24	; 0x01
    1250:	31 c0       	rjmp	.+98     	; 0x12b4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1252:	19 82       	std	Y+1, r1	; 0x01
    1254:	2f c0       	rjmp	.+94     	; 0x12b4 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1256:	e3 e3       	ldi	r30, 0x33	; 51
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	88 2f       	mov	r24, r24
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	a9 01       	movw	r20, r18
    1268:	02 c0       	rjmp	.+4      	; 0x126e <GPIO_readPin+0xde>
    126a:	55 95       	asr	r21
    126c:	47 95       	ror	r20
    126e:	8a 95       	dec	r24
    1270:	e2 f7       	brpl	.-8      	; 0x126a <GPIO_readPin+0xda>
    1272:	ca 01       	movw	r24, r20
    1274:	81 70       	andi	r24, 0x01	; 1
    1276:	90 70       	andi	r25, 0x00	; 0
    1278:	88 23       	and	r24, r24
    127a:	19 f0       	breq	.+6      	; 0x1282 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	89 83       	std	Y+1, r24	; 0x01
    1280:	19 c0       	rjmp	.+50     	; 0x12b4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1282:	19 82       	std	Y+1, r1	; 0x01
    1284:	17 c0       	rjmp	.+46     	; 0x12b4 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1286:	e0 e3       	ldi	r30, 0x30	; 48
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	88 2f       	mov	r24, r24
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	a9 01       	movw	r20, r18
    1298:	02 c0       	rjmp	.+4      	; 0x129e <GPIO_readPin+0x10e>
    129a:	55 95       	asr	r21
    129c:	47 95       	ror	r20
    129e:	8a 95       	dec	r24
    12a0:	e2 f7       	brpl	.-8      	; 0x129a <GPIO_readPin+0x10a>
    12a2:	ca 01       	movw	r24, r20
    12a4:	81 70       	andi	r24, 0x01	; 1
    12a6:	90 70       	andi	r25, 0x00	; 0
    12a8:	88 23       	and	r24, r24
    12aa:	19 f0       	breq	.+6      	; 0x12b2 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	89 83       	std	Y+1, r24	; 0x01
    12b0:	01 c0       	rjmp	.+2      	; 0x12b4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    12b2:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    12b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	cf 91       	pop	r28
    12c2:	df 91       	pop	r29
    12c4:	08 95       	ret

000012c6 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    12c6:	df 93       	push	r29
    12c8:	cf 93       	push	r28
    12ca:	00 d0       	rcall	.+0      	; 0x12cc <GPIO_setupPortDirection+0x6>
    12cc:	00 d0       	rcall	.+0      	; 0x12ce <GPIO_setupPortDirection+0x8>
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
    12d2:	89 83       	std	Y+1, r24	; 0x01
    12d4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	84 30       	cpi	r24, 0x04	; 4
    12da:	90 f5       	brcc	.+100    	; 0x1340 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    12dc:	89 81       	ldd	r24, Y+1	; 0x01
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	3c 83       	std	Y+4, r19	; 0x04
    12e4:	2b 83       	std	Y+3, r18	; 0x03
    12e6:	8b 81       	ldd	r24, Y+3	; 0x03
    12e8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ea:	81 30       	cpi	r24, 0x01	; 1
    12ec:	91 05       	cpc	r25, r1
    12ee:	d1 f0       	breq	.+52     	; 0x1324 <GPIO_setupPortDirection+0x5e>
    12f0:	2b 81       	ldd	r18, Y+3	; 0x03
    12f2:	3c 81       	ldd	r19, Y+4	; 0x04
    12f4:	22 30       	cpi	r18, 0x02	; 2
    12f6:	31 05       	cpc	r19, r1
    12f8:	2c f4       	brge	.+10     	; 0x1304 <GPIO_setupPortDirection+0x3e>
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	9c 81       	ldd	r25, Y+4	; 0x04
    12fe:	00 97       	sbiw	r24, 0x00	; 0
    1300:	61 f0       	breq	.+24     	; 0x131a <GPIO_setupPortDirection+0x54>
    1302:	1e c0       	rjmp	.+60     	; 0x1340 <GPIO_setupPortDirection+0x7a>
    1304:	2b 81       	ldd	r18, Y+3	; 0x03
    1306:	3c 81       	ldd	r19, Y+4	; 0x04
    1308:	22 30       	cpi	r18, 0x02	; 2
    130a:	31 05       	cpc	r19, r1
    130c:	81 f0       	breq	.+32     	; 0x132e <GPIO_setupPortDirection+0x68>
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	9c 81       	ldd	r25, Y+4	; 0x04
    1312:	83 30       	cpi	r24, 0x03	; 3
    1314:	91 05       	cpc	r25, r1
    1316:	81 f0       	breq	.+32     	; 0x1338 <GPIO_setupPortDirection+0x72>
    1318:	13 c0       	rjmp	.+38     	; 0x1340 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    131a:	ea e3       	ldi	r30, 0x3A	; 58
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	80 83       	st	Z, r24
    1322:	0e c0       	rjmp	.+28     	; 0x1340 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1324:	e7 e3       	ldi	r30, 0x37	; 55
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	8a 81       	ldd	r24, Y+2	; 0x02
    132a:	80 83       	st	Z, r24
    132c:	09 c0       	rjmp	.+18     	; 0x1340 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    132e:	e4 e3       	ldi	r30, 0x34	; 52
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	80 83       	st	Z, r24
    1336:	04 c0       	rjmp	.+8      	; 0x1340 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1338:	e1 e3       	ldi	r30, 0x31	; 49
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1340:	0f 90       	pop	r0
    1342:	0f 90       	pop	r0
    1344:	0f 90       	pop	r0
    1346:	0f 90       	pop	r0
    1348:	cf 91       	pop	r28
    134a:	df 91       	pop	r29
    134c:	08 95       	ret

0000134e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    134e:	df 93       	push	r29
    1350:	cf 93       	push	r28
    1352:	00 d0       	rcall	.+0      	; 0x1354 <GPIO_writePort+0x6>
    1354:	00 d0       	rcall	.+0      	; 0x1356 <GPIO_writePort+0x8>
    1356:	cd b7       	in	r28, 0x3d	; 61
    1358:	de b7       	in	r29, 0x3e	; 62
    135a:	89 83       	std	Y+1, r24	; 0x01
    135c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	84 30       	cpi	r24, 0x04	; 4
    1362:	90 f5       	brcc	.+100    	; 0x13c8 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1364:	89 81       	ldd	r24, Y+1	; 0x01
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	3c 83       	std	Y+4, r19	; 0x04
    136c:	2b 83       	std	Y+3, r18	; 0x03
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	9c 81       	ldd	r25, Y+4	; 0x04
    1372:	81 30       	cpi	r24, 0x01	; 1
    1374:	91 05       	cpc	r25, r1
    1376:	d1 f0       	breq	.+52     	; 0x13ac <GPIO_writePort+0x5e>
    1378:	2b 81       	ldd	r18, Y+3	; 0x03
    137a:	3c 81       	ldd	r19, Y+4	; 0x04
    137c:	22 30       	cpi	r18, 0x02	; 2
    137e:	31 05       	cpc	r19, r1
    1380:	2c f4       	brge	.+10     	; 0x138c <GPIO_writePort+0x3e>
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	9c 81       	ldd	r25, Y+4	; 0x04
    1386:	00 97       	sbiw	r24, 0x00	; 0
    1388:	61 f0       	breq	.+24     	; 0x13a2 <GPIO_writePort+0x54>
    138a:	1e c0       	rjmp	.+60     	; 0x13c8 <GPIO_writePort+0x7a>
    138c:	2b 81       	ldd	r18, Y+3	; 0x03
    138e:	3c 81       	ldd	r19, Y+4	; 0x04
    1390:	22 30       	cpi	r18, 0x02	; 2
    1392:	31 05       	cpc	r19, r1
    1394:	81 f0       	breq	.+32     	; 0x13b6 <GPIO_writePort+0x68>
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	9c 81       	ldd	r25, Y+4	; 0x04
    139a:	83 30       	cpi	r24, 0x03	; 3
    139c:	91 05       	cpc	r25, r1
    139e:	81 f0       	breq	.+32     	; 0x13c0 <GPIO_writePort+0x72>
    13a0:	13 c0       	rjmp	.+38     	; 0x13c8 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    13a2:	eb e3       	ldi	r30, 0x3B	; 59
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	80 83       	st	Z, r24
    13aa:	0e c0       	rjmp	.+28     	; 0x13c8 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    13ac:	e8 e3       	ldi	r30, 0x38	; 56
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	8a 81       	ldd	r24, Y+2	; 0x02
    13b2:	80 83       	st	Z, r24
    13b4:	09 c0       	rjmp	.+18     	; 0x13c8 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    13b6:	e5 e3       	ldi	r30, 0x35	; 53
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	80 83       	st	Z, r24
    13be:	04 c0       	rjmp	.+8      	; 0x13c8 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    13c0:	e2 e3       	ldi	r30, 0x32	; 50
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	80 83       	st	Z, r24
			break;
		}
	}
}
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	cf 91       	pop	r28
    13d2:	df 91       	pop	r29
    13d4:	08 95       	ret

000013d6 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	00 d0       	rcall	.+0      	; 0x13dc <GPIO_readPort+0x6>
    13dc:	00 d0       	rcall	.+0      	; 0x13de <GPIO_readPort+0x8>
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
    13e2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    13e4:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
    13e8:	84 30       	cpi	r24, 0x04	; 4
    13ea:	90 f5       	brcc	.+100    	; 0x1450 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	28 2f       	mov	r18, r24
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	3c 83       	std	Y+4, r19	; 0x04
    13f4:	2b 83       	std	Y+3, r18	; 0x03
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	9c 81       	ldd	r25, Y+4	; 0x04
    13fa:	81 30       	cpi	r24, 0x01	; 1
    13fc:	91 05       	cpc	r25, r1
    13fe:	d1 f0       	breq	.+52     	; 0x1434 <GPIO_readPort+0x5e>
    1400:	2b 81       	ldd	r18, Y+3	; 0x03
    1402:	3c 81       	ldd	r19, Y+4	; 0x04
    1404:	22 30       	cpi	r18, 0x02	; 2
    1406:	31 05       	cpc	r19, r1
    1408:	2c f4       	brge	.+10     	; 0x1414 <GPIO_readPort+0x3e>
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	9c 81       	ldd	r25, Y+4	; 0x04
    140e:	00 97       	sbiw	r24, 0x00	; 0
    1410:	61 f0       	breq	.+24     	; 0x142a <GPIO_readPort+0x54>
    1412:	1e c0       	rjmp	.+60     	; 0x1450 <GPIO_readPort+0x7a>
    1414:	2b 81       	ldd	r18, Y+3	; 0x03
    1416:	3c 81       	ldd	r19, Y+4	; 0x04
    1418:	22 30       	cpi	r18, 0x02	; 2
    141a:	31 05       	cpc	r19, r1
    141c:	81 f0       	breq	.+32     	; 0x143e <GPIO_readPort+0x68>
    141e:	8b 81       	ldd	r24, Y+3	; 0x03
    1420:	9c 81       	ldd	r25, Y+4	; 0x04
    1422:	83 30       	cpi	r24, 0x03	; 3
    1424:	91 05       	cpc	r25, r1
    1426:	81 f0       	breq	.+32     	; 0x1448 <GPIO_readPort+0x72>
    1428:	13 c0       	rjmp	.+38     	; 0x1450 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    142a:	e9 e3       	ldi	r30, 0x39	; 57
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	89 83       	std	Y+1, r24	; 0x01
    1432:	0e c0       	rjmp	.+28     	; 0x1450 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1434:	e6 e3       	ldi	r30, 0x36	; 54
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	89 83       	std	Y+1, r24	; 0x01
    143c:	09 c0       	rjmp	.+18     	; 0x1450 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    143e:	e3 e3       	ldi	r30, 0x33	; 51
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	89 83       	std	Y+1, r24	; 0x01
    1446:	04 c0       	rjmp	.+8      	; 0x1450 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1448:	e0 e3       	ldi	r30, 0x30	; 48
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1450:	89 81       	ldd	r24, Y+1	; 0x01
}
    1452:	0f 90       	pop	r0
    1454:	0f 90       	pop	r0
    1456:	0f 90       	pop	r0
    1458:	0f 90       	pop	r0
    145a:	cf 91       	pop	r28
    145c:	df 91       	pop	r29
    145e:	08 95       	ret

00001460 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1460:	df 93       	push	r29
    1462:	cf 93       	push	r28
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1468:	82 e0       	ldi	r24, 0x02	; 2
    146a:	63 e0       	ldi	r22, 0x03	; 3
    146c:	41 e0       	ldi	r20, 0x01	; 1
    146e:	0e 94 f2 06 	call	0xde4	; 0xde4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1472:	82 e0       	ldi	r24, 0x02	; 2
    1474:	64 e0       	ldi	r22, 0x04	; 4
    1476:	41 e0       	ldi	r20, 0x01	; 1
    1478:	0e 94 f2 06 	call	0xde4	; 0xde4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    147c:	82 e0       	ldi	r24, 0x02	; 2
    147e:	65 e0       	ldi	r22, 0x05	; 5
    1480:	41 e0       	ldi	r20, 0x01	; 1
    1482:	0e 94 f2 06 	call	0xde4	; 0xde4 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1486:	83 e0       	ldi	r24, 0x03	; 3
    1488:	6f ef       	ldi	r22, 0xFF	; 255
    148a:	0e 94 63 09 	call	0x12c6	; 0x12c6 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    148e:	88 e3       	ldi	r24, 0x38	; 56
    1490:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1494:	8c e0       	ldi	r24, 0x0C	; 12
    1496:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <LCD_sendCommand>
}
    14a0:	cf 91       	pop	r28
    14a2:	df 91       	pop	r29
    14a4:	08 95       	ret

000014a6 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    14a6:	df 93       	push	r29
    14a8:	cf 93       	push	r28
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
    14ae:	e9 97       	sbiw	r28, 0x39	; 57
    14b0:	0f b6       	in	r0, 0x3f	; 63
    14b2:	f8 94       	cli
    14b4:	de bf       	out	0x3e, r29	; 62
    14b6:	0f be       	out	0x3f, r0	; 63
    14b8:	cd bf       	out	0x3d, r28	; 61
    14ba:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    14bc:	82 e0       	ldi	r24, 0x02	; 2
    14be:	63 e0       	ldi	r22, 0x03	; 3
    14c0:	40 e0       	ldi	r20, 0x00	; 0
    14c2:	0e 94 dd 07 	call	0xfba	; 0xfba <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    14c6:	82 e0       	ldi	r24, 0x02	; 2
    14c8:	64 e0       	ldi	r22, 0x04	; 4
    14ca:	40 e0       	ldi	r20, 0x00	; 0
    14cc:	0e 94 dd 07 	call	0xfba	; 0xfba <GPIO_writePin>
    14d0:	80 e0       	ldi	r24, 0x00	; 0
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	a0 e8       	ldi	r26, 0x80	; 128
    14d6:	bf e3       	ldi	r27, 0x3F	; 63
    14d8:	8d ab       	std	Y+53, r24	; 0x35
    14da:	9e ab       	std	Y+54, r25	; 0x36
    14dc:	af ab       	std	Y+55, r26	; 0x37
    14de:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14e0:	6d a9       	ldd	r22, Y+53	; 0x35
    14e2:	7e a9       	ldd	r23, Y+54	; 0x36
    14e4:	8f a9       	ldd	r24, Y+55	; 0x37
    14e6:	98 ad       	ldd	r25, Y+56	; 0x38
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	4a e7       	ldi	r20, 0x7A	; 122
    14ee:	53 e4       	ldi	r21, 0x43	; 67
    14f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f4:	dc 01       	movw	r26, r24
    14f6:	cb 01       	movw	r24, r22
    14f8:	89 ab       	std	Y+49, r24	; 0x31
    14fa:	9a ab       	std	Y+50, r25	; 0x32
    14fc:	ab ab       	std	Y+51, r26	; 0x33
    14fe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1500:	69 a9       	ldd	r22, Y+49	; 0x31
    1502:	7a a9       	ldd	r23, Y+50	; 0x32
    1504:	8b a9       	ldd	r24, Y+51	; 0x33
    1506:	9c a9       	ldd	r25, Y+52	; 0x34
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	40 e8       	ldi	r20, 0x80	; 128
    150e:	5f e3       	ldi	r21, 0x3F	; 63
    1510:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1514:	88 23       	and	r24, r24
    1516:	2c f4       	brge	.+10     	; 0x1522 <LCD_sendCommand+0x7c>
		__ticks = 1;
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	98 ab       	std	Y+48, r25	; 0x30
    151e:	8f a7       	std	Y+47, r24	; 0x2f
    1520:	3f c0       	rjmp	.+126    	; 0x15a0 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1522:	69 a9       	ldd	r22, Y+49	; 0x31
    1524:	7a a9       	ldd	r23, Y+50	; 0x32
    1526:	8b a9       	ldd	r24, Y+51	; 0x33
    1528:	9c a9       	ldd	r25, Y+52	; 0x34
    152a:	20 e0       	ldi	r18, 0x00	; 0
    152c:	3f ef       	ldi	r19, 0xFF	; 255
    152e:	4f e7       	ldi	r20, 0x7F	; 127
    1530:	57 e4       	ldi	r21, 0x47	; 71
    1532:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1536:	18 16       	cp	r1, r24
    1538:	4c f5       	brge	.+82     	; 0x158c <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    153a:	6d a9       	ldd	r22, Y+53	; 0x35
    153c:	7e a9       	ldd	r23, Y+54	; 0x36
    153e:	8f a9       	ldd	r24, Y+55	; 0x37
    1540:	98 ad       	ldd	r25, Y+56	; 0x38
    1542:	20 e0       	ldi	r18, 0x00	; 0
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	40 e2       	ldi	r20, 0x20	; 32
    1548:	51 e4       	ldi	r21, 0x41	; 65
    154a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    154e:	dc 01       	movw	r26, r24
    1550:	cb 01       	movw	r24, r22
    1552:	bc 01       	movw	r22, r24
    1554:	cd 01       	movw	r24, r26
    1556:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    155a:	dc 01       	movw	r26, r24
    155c:	cb 01       	movw	r24, r22
    155e:	98 ab       	std	Y+48, r25	; 0x30
    1560:	8f a7       	std	Y+47, r24	; 0x2f
    1562:	0f c0       	rjmp	.+30     	; 0x1582 <LCD_sendCommand+0xdc>
    1564:	89 e1       	ldi	r24, 0x19	; 25
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	9e a7       	std	Y+46, r25	; 0x2e
    156a:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    156c:	8d a5       	ldd	r24, Y+45	; 0x2d
    156e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1570:	01 97       	sbiw	r24, 0x01	; 1
    1572:	f1 f7       	brne	.-4      	; 0x1570 <LCD_sendCommand+0xca>
    1574:	9e a7       	std	Y+46, r25	; 0x2e
    1576:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1578:	8f a5       	ldd	r24, Y+47	; 0x2f
    157a:	98 a9       	ldd	r25, Y+48	; 0x30
    157c:	01 97       	sbiw	r24, 0x01	; 1
    157e:	98 ab       	std	Y+48, r25	; 0x30
    1580:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1582:	8f a5       	ldd	r24, Y+47	; 0x2f
    1584:	98 a9       	ldd	r25, Y+48	; 0x30
    1586:	00 97       	sbiw	r24, 0x00	; 0
    1588:	69 f7       	brne	.-38     	; 0x1564 <LCD_sendCommand+0xbe>
    158a:	14 c0       	rjmp	.+40     	; 0x15b4 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    158c:	69 a9       	ldd	r22, Y+49	; 0x31
    158e:	7a a9       	ldd	r23, Y+50	; 0x32
    1590:	8b a9       	ldd	r24, Y+51	; 0x33
    1592:	9c a9       	ldd	r25, Y+52	; 0x34
    1594:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1598:	dc 01       	movw	r26, r24
    159a:	cb 01       	movw	r24, r22
    159c:	98 ab       	std	Y+48, r25	; 0x30
    159e:	8f a7       	std	Y+47, r24	; 0x2f
    15a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    15a2:	98 a9       	ldd	r25, Y+48	; 0x30
    15a4:	9c a7       	std	Y+44, r25	; 0x2c
    15a6:	8b a7       	std	Y+43, r24	; 0x2b
    15a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    15aa:	9c a5       	ldd	r25, Y+44	; 0x2c
    15ac:	01 97       	sbiw	r24, 0x01	; 1
    15ae:	f1 f7       	brne	.-4      	; 0x15ac <LCD_sendCommand+0x106>
    15b0:	9c a7       	std	Y+44, r25	; 0x2c
    15b2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    15b4:	82 e0       	ldi	r24, 0x02	; 2
    15b6:	65 e0       	ldi	r22, 0x05	; 5
    15b8:	41 e0       	ldi	r20, 0x01	; 1
    15ba:	0e 94 dd 07 	call	0xfba	; 0xfba <GPIO_writePin>
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	a0 e8       	ldi	r26, 0x80	; 128
    15c4:	bf e3       	ldi	r27, 0x3F	; 63
    15c6:	8f a3       	std	Y+39, r24	; 0x27
    15c8:	98 a7       	std	Y+40, r25	; 0x28
    15ca:	a9 a7       	std	Y+41, r26	; 0x29
    15cc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15ce:	6f a1       	ldd	r22, Y+39	; 0x27
    15d0:	78 a5       	ldd	r23, Y+40	; 0x28
    15d2:	89 a5       	ldd	r24, Y+41	; 0x29
    15d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    15d6:	20 e0       	ldi	r18, 0x00	; 0
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	4a e7       	ldi	r20, 0x7A	; 122
    15dc:	53 e4       	ldi	r21, 0x43	; 67
    15de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e2:	dc 01       	movw	r26, r24
    15e4:	cb 01       	movw	r24, r22
    15e6:	8b a3       	std	Y+35, r24	; 0x23
    15e8:	9c a3       	std	Y+36, r25	; 0x24
    15ea:	ad a3       	std	Y+37, r26	; 0x25
    15ec:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    15ee:	6b a1       	ldd	r22, Y+35	; 0x23
    15f0:	7c a1       	ldd	r23, Y+36	; 0x24
    15f2:	8d a1       	ldd	r24, Y+37	; 0x25
    15f4:	9e a1       	ldd	r25, Y+38	; 0x26
    15f6:	20 e0       	ldi	r18, 0x00	; 0
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	40 e8       	ldi	r20, 0x80	; 128
    15fc:	5f e3       	ldi	r21, 0x3F	; 63
    15fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1602:	88 23       	and	r24, r24
    1604:	2c f4       	brge	.+10     	; 0x1610 <LCD_sendCommand+0x16a>
		__ticks = 1;
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	9a a3       	std	Y+34, r25	; 0x22
    160c:	89 a3       	std	Y+33, r24	; 0x21
    160e:	3f c0       	rjmp	.+126    	; 0x168e <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    1610:	6b a1       	ldd	r22, Y+35	; 0x23
    1612:	7c a1       	ldd	r23, Y+36	; 0x24
    1614:	8d a1       	ldd	r24, Y+37	; 0x25
    1616:	9e a1       	ldd	r25, Y+38	; 0x26
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	3f ef       	ldi	r19, 0xFF	; 255
    161c:	4f e7       	ldi	r20, 0x7F	; 127
    161e:	57 e4       	ldi	r21, 0x47	; 71
    1620:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1624:	18 16       	cp	r1, r24
    1626:	4c f5       	brge	.+82     	; 0x167a <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1628:	6f a1       	ldd	r22, Y+39	; 0x27
    162a:	78 a5       	ldd	r23, Y+40	; 0x28
    162c:	89 a5       	ldd	r24, Y+41	; 0x29
    162e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	40 e2       	ldi	r20, 0x20	; 32
    1636:	51 e4       	ldi	r21, 0x41	; 65
    1638:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    163c:	dc 01       	movw	r26, r24
    163e:	cb 01       	movw	r24, r22
    1640:	bc 01       	movw	r22, r24
    1642:	cd 01       	movw	r24, r26
    1644:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1648:	dc 01       	movw	r26, r24
    164a:	cb 01       	movw	r24, r22
    164c:	9a a3       	std	Y+34, r25	; 0x22
    164e:	89 a3       	std	Y+33, r24	; 0x21
    1650:	0f c0       	rjmp	.+30     	; 0x1670 <LCD_sendCommand+0x1ca>
    1652:	89 e1       	ldi	r24, 0x19	; 25
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	98 a3       	std	Y+32, r25	; 0x20
    1658:	8f 8f       	std	Y+31, r24	; 0x1f
    165a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    165c:	98 a1       	ldd	r25, Y+32	; 0x20
    165e:	01 97       	sbiw	r24, 0x01	; 1
    1660:	f1 f7       	brne	.-4      	; 0x165e <LCD_sendCommand+0x1b8>
    1662:	98 a3       	std	Y+32, r25	; 0x20
    1664:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1666:	89 a1       	ldd	r24, Y+33	; 0x21
    1668:	9a a1       	ldd	r25, Y+34	; 0x22
    166a:	01 97       	sbiw	r24, 0x01	; 1
    166c:	9a a3       	std	Y+34, r25	; 0x22
    166e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1670:	89 a1       	ldd	r24, Y+33	; 0x21
    1672:	9a a1       	ldd	r25, Y+34	; 0x22
    1674:	00 97       	sbiw	r24, 0x00	; 0
    1676:	69 f7       	brne	.-38     	; 0x1652 <LCD_sendCommand+0x1ac>
    1678:	14 c0       	rjmp	.+40     	; 0x16a2 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    167a:	6b a1       	ldd	r22, Y+35	; 0x23
    167c:	7c a1       	ldd	r23, Y+36	; 0x24
    167e:	8d a1       	ldd	r24, Y+37	; 0x25
    1680:	9e a1       	ldd	r25, Y+38	; 0x26
    1682:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1686:	dc 01       	movw	r26, r24
    1688:	cb 01       	movw	r24, r22
    168a:	9a a3       	std	Y+34, r25	; 0x22
    168c:	89 a3       	std	Y+33, r24	; 0x21
    168e:	89 a1       	ldd	r24, Y+33	; 0x21
    1690:	9a a1       	ldd	r25, Y+34	; 0x22
    1692:	9e 8f       	std	Y+30, r25	; 0x1e
    1694:	8d 8f       	std	Y+29, r24	; 0x1d
    1696:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1698:	9e 8d       	ldd	r25, Y+30	; 0x1e
    169a:	01 97       	sbiw	r24, 0x01	; 1
    169c:	f1 f7       	brne	.-4      	; 0x169a <LCD_sendCommand+0x1f4>
    169e:	9e 8f       	std	Y+30, r25	; 0x1e
    16a0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    16a2:	83 e0       	ldi	r24, 0x03	; 3
    16a4:	69 ad       	ldd	r22, Y+57	; 0x39
    16a6:	0e 94 a7 09 	call	0x134e	; 0x134e <GPIO_writePort>
    16aa:	80 e0       	ldi	r24, 0x00	; 0
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	a0 e8       	ldi	r26, 0x80	; 128
    16b0:	bf e3       	ldi	r27, 0x3F	; 63
    16b2:	89 8f       	std	Y+25, r24	; 0x19
    16b4:	9a 8f       	std	Y+26, r25	; 0x1a
    16b6:	ab 8f       	std	Y+27, r26	; 0x1b
    16b8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ba:	69 8d       	ldd	r22, Y+25	; 0x19
    16bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	4a e7       	ldi	r20, 0x7A	; 122
    16c8:	53 e4       	ldi	r21, 0x43	; 67
    16ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ce:	dc 01       	movw	r26, r24
    16d0:	cb 01       	movw	r24, r22
    16d2:	8d 8b       	std	Y+21, r24	; 0x15
    16d4:	9e 8b       	std	Y+22, r25	; 0x16
    16d6:	af 8b       	std	Y+23, r26	; 0x17
    16d8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16da:	6d 89       	ldd	r22, Y+21	; 0x15
    16dc:	7e 89       	ldd	r23, Y+22	; 0x16
    16de:	8f 89       	ldd	r24, Y+23	; 0x17
    16e0:	98 8d       	ldd	r25, Y+24	; 0x18
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	40 e8       	ldi	r20, 0x80	; 128
    16e8:	5f e3       	ldi	r21, 0x3F	; 63
    16ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16ee:	88 23       	and	r24, r24
    16f0:	2c f4       	brge	.+10     	; 0x16fc <LCD_sendCommand+0x256>
		__ticks = 1;
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	9c 8b       	std	Y+20, r25	; 0x14
    16f8:	8b 8b       	std	Y+19, r24	; 0x13
    16fa:	3f c0       	rjmp	.+126    	; 0x177a <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    16fc:	6d 89       	ldd	r22, Y+21	; 0x15
    16fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1700:	8f 89       	ldd	r24, Y+23	; 0x17
    1702:	98 8d       	ldd	r25, Y+24	; 0x18
    1704:	20 e0       	ldi	r18, 0x00	; 0
    1706:	3f ef       	ldi	r19, 0xFF	; 255
    1708:	4f e7       	ldi	r20, 0x7F	; 127
    170a:	57 e4       	ldi	r21, 0x47	; 71
    170c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1710:	18 16       	cp	r1, r24
    1712:	4c f5       	brge	.+82     	; 0x1766 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1714:	69 8d       	ldd	r22, Y+25	; 0x19
    1716:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1718:	8b 8d       	ldd	r24, Y+27	; 0x1b
    171a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	40 e2       	ldi	r20, 0x20	; 32
    1722:	51 e4       	ldi	r21, 0x41	; 65
    1724:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1728:	dc 01       	movw	r26, r24
    172a:	cb 01       	movw	r24, r22
    172c:	bc 01       	movw	r22, r24
    172e:	cd 01       	movw	r24, r26
    1730:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1734:	dc 01       	movw	r26, r24
    1736:	cb 01       	movw	r24, r22
    1738:	9c 8b       	std	Y+20, r25	; 0x14
    173a:	8b 8b       	std	Y+19, r24	; 0x13
    173c:	0f c0       	rjmp	.+30     	; 0x175c <LCD_sendCommand+0x2b6>
    173e:	89 e1       	ldi	r24, 0x19	; 25
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	9a 8b       	std	Y+18, r25	; 0x12
    1744:	89 8b       	std	Y+17, r24	; 0x11
    1746:	89 89       	ldd	r24, Y+17	; 0x11
    1748:	9a 89       	ldd	r25, Y+18	; 0x12
    174a:	01 97       	sbiw	r24, 0x01	; 1
    174c:	f1 f7       	brne	.-4      	; 0x174a <LCD_sendCommand+0x2a4>
    174e:	9a 8b       	std	Y+18, r25	; 0x12
    1750:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1752:	8b 89       	ldd	r24, Y+19	; 0x13
    1754:	9c 89       	ldd	r25, Y+20	; 0x14
    1756:	01 97       	sbiw	r24, 0x01	; 1
    1758:	9c 8b       	std	Y+20, r25	; 0x14
    175a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    175c:	8b 89       	ldd	r24, Y+19	; 0x13
    175e:	9c 89       	ldd	r25, Y+20	; 0x14
    1760:	00 97       	sbiw	r24, 0x00	; 0
    1762:	69 f7       	brne	.-38     	; 0x173e <LCD_sendCommand+0x298>
    1764:	14 c0       	rjmp	.+40     	; 0x178e <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1766:	6d 89       	ldd	r22, Y+21	; 0x15
    1768:	7e 89       	ldd	r23, Y+22	; 0x16
    176a:	8f 89       	ldd	r24, Y+23	; 0x17
    176c:	98 8d       	ldd	r25, Y+24	; 0x18
    176e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1772:	dc 01       	movw	r26, r24
    1774:	cb 01       	movw	r24, r22
    1776:	9c 8b       	std	Y+20, r25	; 0x14
    1778:	8b 8b       	std	Y+19, r24	; 0x13
    177a:	8b 89       	ldd	r24, Y+19	; 0x13
    177c:	9c 89       	ldd	r25, Y+20	; 0x14
    177e:	98 8b       	std	Y+16, r25	; 0x10
    1780:	8f 87       	std	Y+15, r24	; 0x0f
    1782:	8f 85       	ldd	r24, Y+15	; 0x0f
    1784:	98 89       	ldd	r25, Y+16	; 0x10
    1786:	01 97       	sbiw	r24, 0x01	; 1
    1788:	f1 f7       	brne	.-4      	; 0x1786 <LCD_sendCommand+0x2e0>
    178a:	98 8b       	std	Y+16, r25	; 0x10
    178c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    178e:	82 e0       	ldi	r24, 0x02	; 2
    1790:	65 e0       	ldi	r22, 0x05	; 5
    1792:	40 e0       	ldi	r20, 0x00	; 0
    1794:	0e 94 dd 07 	call	0xfba	; 0xfba <GPIO_writePin>
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	a0 e8       	ldi	r26, 0x80	; 128
    179e:	bf e3       	ldi	r27, 0x3F	; 63
    17a0:	8b 87       	std	Y+11, r24	; 0x0b
    17a2:	9c 87       	std	Y+12, r25	; 0x0c
    17a4:	ad 87       	std	Y+13, r26	; 0x0d
    17a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    17aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	4a e7       	ldi	r20, 0x7A	; 122
    17b6:	53 e4       	ldi	r21, 0x43	; 67
    17b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17bc:	dc 01       	movw	r26, r24
    17be:	cb 01       	movw	r24, r22
    17c0:	8f 83       	std	Y+7, r24	; 0x07
    17c2:	98 87       	std	Y+8, r25	; 0x08
    17c4:	a9 87       	std	Y+9, r26	; 0x09
    17c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17c8:	6f 81       	ldd	r22, Y+7	; 0x07
    17ca:	78 85       	ldd	r23, Y+8	; 0x08
    17cc:	89 85       	ldd	r24, Y+9	; 0x09
    17ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	40 e8       	ldi	r20, 0x80	; 128
    17d6:	5f e3       	ldi	r21, 0x3F	; 63
    17d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17dc:	88 23       	and	r24, r24
    17de:	2c f4       	brge	.+10     	; 0x17ea <LCD_sendCommand+0x344>
		__ticks = 1;
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	9e 83       	std	Y+6, r25	; 0x06
    17e6:	8d 83       	std	Y+5, r24	; 0x05
    17e8:	3f c0       	rjmp	.+126    	; 0x1868 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    17ea:	6f 81       	ldd	r22, Y+7	; 0x07
    17ec:	78 85       	ldd	r23, Y+8	; 0x08
    17ee:	89 85       	ldd	r24, Y+9	; 0x09
    17f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	3f ef       	ldi	r19, 0xFF	; 255
    17f6:	4f e7       	ldi	r20, 0x7F	; 127
    17f8:	57 e4       	ldi	r21, 0x47	; 71
    17fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17fe:	18 16       	cp	r1, r24
    1800:	4c f5       	brge	.+82     	; 0x1854 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1802:	6b 85       	ldd	r22, Y+11	; 0x0b
    1804:	7c 85       	ldd	r23, Y+12	; 0x0c
    1806:	8d 85       	ldd	r24, Y+13	; 0x0d
    1808:	9e 85       	ldd	r25, Y+14	; 0x0e
    180a:	20 e0       	ldi	r18, 0x00	; 0
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	40 e2       	ldi	r20, 0x20	; 32
    1810:	51 e4       	ldi	r21, 0x41	; 65
    1812:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1816:	dc 01       	movw	r26, r24
    1818:	cb 01       	movw	r24, r22
    181a:	bc 01       	movw	r22, r24
    181c:	cd 01       	movw	r24, r26
    181e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1822:	dc 01       	movw	r26, r24
    1824:	cb 01       	movw	r24, r22
    1826:	9e 83       	std	Y+6, r25	; 0x06
    1828:	8d 83       	std	Y+5, r24	; 0x05
    182a:	0f c0       	rjmp	.+30     	; 0x184a <LCD_sendCommand+0x3a4>
    182c:	89 e1       	ldi	r24, 0x19	; 25
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	9c 83       	std	Y+4, r25	; 0x04
    1832:	8b 83       	std	Y+3, r24	; 0x03
    1834:	8b 81       	ldd	r24, Y+3	; 0x03
    1836:	9c 81       	ldd	r25, Y+4	; 0x04
    1838:	01 97       	sbiw	r24, 0x01	; 1
    183a:	f1 f7       	brne	.-4      	; 0x1838 <LCD_sendCommand+0x392>
    183c:	9c 83       	std	Y+4, r25	; 0x04
    183e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1840:	8d 81       	ldd	r24, Y+5	; 0x05
    1842:	9e 81       	ldd	r25, Y+6	; 0x06
    1844:	01 97       	sbiw	r24, 0x01	; 1
    1846:	9e 83       	std	Y+6, r25	; 0x06
    1848:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    184a:	8d 81       	ldd	r24, Y+5	; 0x05
    184c:	9e 81       	ldd	r25, Y+6	; 0x06
    184e:	00 97       	sbiw	r24, 0x00	; 0
    1850:	69 f7       	brne	.-38     	; 0x182c <LCD_sendCommand+0x386>
    1852:	14 c0       	rjmp	.+40     	; 0x187c <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1854:	6f 81       	ldd	r22, Y+7	; 0x07
    1856:	78 85       	ldd	r23, Y+8	; 0x08
    1858:	89 85       	ldd	r24, Y+9	; 0x09
    185a:	9a 85       	ldd	r25, Y+10	; 0x0a
    185c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1860:	dc 01       	movw	r26, r24
    1862:	cb 01       	movw	r24, r22
    1864:	9e 83       	std	Y+6, r25	; 0x06
    1866:	8d 83       	std	Y+5, r24	; 0x05
    1868:	8d 81       	ldd	r24, Y+5	; 0x05
    186a:	9e 81       	ldd	r25, Y+6	; 0x06
    186c:	9a 83       	std	Y+2, r25	; 0x02
    186e:	89 83       	std	Y+1, r24	; 0x01
    1870:	89 81       	ldd	r24, Y+1	; 0x01
    1872:	9a 81       	ldd	r25, Y+2	; 0x02
    1874:	01 97       	sbiw	r24, 0x01	; 1
    1876:	f1 f7       	brne	.-4      	; 0x1874 <LCD_sendCommand+0x3ce>
    1878:	9a 83       	std	Y+2, r25	; 0x02
    187a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    187c:	e9 96       	adiw	r28, 0x39	; 57
    187e:	0f b6       	in	r0, 0x3f	; 63
    1880:	f8 94       	cli
    1882:	de bf       	out	0x3e, r29	; 62
    1884:	0f be       	out	0x3f, r0	; 63
    1886:	cd bf       	out	0x3d, r28	; 61
    1888:	cf 91       	pop	r28
    188a:	df 91       	pop	r29
    188c:	08 95       	ret

0000188e <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    188e:	df 93       	push	r29
    1890:	cf 93       	push	r28
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
    1896:	e9 97       	sbiw	r28, 0x39	; 57
    1898:	0f b6       	in	r0, 0x3f	; 63
    189a:	f8 94       	cli
    189c:	de bf       	out	0x3e, r29	; 62
    189e:	0f be       	out	0x3f, r0	; 63
    18a0:	cd bf       	out	0x3d, r28	; 61
    18a2:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    18a4:	82 e0       	ldi	r24, 0x02	; 2
    18a6:	63 e0       	ldi	r22, 0x03	; 3
    18a8:	41 e0       	ldi	r20, 0x01	; 1
    18aa:	0e 94 dd 07 	call	0xfba	; 0xfba <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    18ae:	82 e0       	ldi	r24, 0x02	; 2
    18b0:	64 e0       	ldi	r22, 0x04	; 4
    18b2:	40 e0       	ldi	r20, 0x00	; 0
    18b4:	0e 94 dd 07 	call	0xfba	; 0xfba <GPIO_writePin>
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	a0 e8       	ldi	r26, 0x80	; 128
    18be:	bf e3       	ldi	r27, 0x3F	; 63
    18c0:	8d ab       	std	Y+53, r24	; 0x35
    18c2:	9e ab       	std	Y+54, r25	; 0x36
    18c4:	af ab       	std	Y+55, r26	; 0x37
    18c6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18c8:	6d a9       	ldd	r22, Y+53	; 0x35
    18ca:	7e a9       	ldd	r23, Y+54	; 0x36
    18cc:	8f a9       	ldd	r24, Y+55	; 0x37
    18ce:	98 ad       	ldd	r25, Y+56	; 0x38
    18d0:	20 e0       	ldi	r18, 0x00	; 0
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	4a e7       	ldi	r20, 0x7A	; 122
    18d6:	53 e4       	ldi	r21, 0x43	; 67
    18d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18dc:	dc 01       	movw	r26, r24
    18de:	cb 01       	movw	r24, r22
    18e0:	89 ab       	std	Y+49, r24	; 0x31
    18e2:	9a ab       	std	Y+50, r25	; 0x32
    18e4:	ab ab       	std	Y+51, r26	; 0x33
    18e6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18e8:	69 a9       	ldd	r22, Y+49	; 0x31
    18ea:	7a a9       	ldd	r23, Y+50	; 0x32
    18ec:	8b a9       	ldd	r24, Y+51	; 0x33
    18ee:	9c a9       	ldd	r25, Y+52	; 0x34
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	40 e8       	ldi	r20, 0x80	; 128
    18f6:	5f e3       	ldi	r21, 0x3F	; 63
    18f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18fc:	88 23       	and	r24, r24
    18fe:	2c f4       	brge	.+10     	; 0x190a <LCD_displayCharacter+0x7c>
		__ticks = 1;
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	98 ab       	std	Y+48, r25	; 0x30
    1906:	8f a7       	std	Y+47, r24	; 0x2f
    1908:	3f c0       	rjmp	.+126    	; 0x1988 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    190a:	69 a9       	ldd	r22, Y+49	; 0x31
    190c:	7a a9       	ldd	r23, Y+50	; 0x32
    190e:	8b a9       	ldd	r24, Y+51	; 0x33
    1910:	9c a9       	ldd	r25, Y+52	; 0x34
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	3f ef       	ldi	r19, 0xFF	; 255
    1916:	4f e7       	ldi	r20, 0x7F	; 127
    1918:	57 e4       	ldi	r21, 0x47	; 71
    191a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    191e:	18 16       	cp	r1, r24
    1920:	4c f5       	brge	.+82     	; 0x1974 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1922:	6d a9       	ldd	r22, Y+53	; 0x35
    1924:	7e a9       	ldd	r23, Y+54	; 0x36
    1926:	8f a9       	ldd	r24, Y+55	; 0x37
    1928:	98 ad       	ldd	r25, Y+56	; 0x38
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	40 e2       	ldi	r20, 0x20	; 32
    1930:	51 e4       	ldi	r21, 0x41	; 65
    1932:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1936:	dc 01       	movw	r26, r24
    1938:	cb 01       	movw	r24, r22
    193a:	bc 01       	movw	r22, r24
    193c:	cd 01       	movw	r24, r26
    193e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	98 ab       	std	Y+48, r25	; 0x30
    1948:	8f a7       	std	Y+47, r24	; 0x2f
    194a:	0f c0       	rjmp	.+30     	; 0x196a <LCD_displayCharacter+0xdc>
    194c:	89 e1       	ldi	r24, 0x19	; 25
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	9e a7       	std	Y+46, r25	; 0x2e
    1952:	8d a7       	std	Y+45, r24	; 0x2d
    1954:	8d a5       	ldd	r24, Y+45	; 0x2d
    1956:	9e a5       	ldd	r25, Y+46	; 0x2e
    1958:	01 97       	sbiw	r24, 0x01	; 1
    195a:	f1 f7       	brne	.-4      	; 0x1958 <LCD_displayCharacter+0xca>
    195c:	9e a7       	std	Y+46, r25	; 0x2e
    195e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1960:	8f a5       	ldd	r24, Y+47	; 0x2f
    1962:	98 a9       	ldd	r25, Y+48	; 0x30
    1964:	01 97       	sbiw	r24, 0x01	; 1
    1966:	98 ab       	std	Y+48, r25	; 0x30
    1968:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    196a:	8f a5       	ldd	r24, Y+47	; 0x2f
    196c:	98 a9       	ldd	r25, Y+48	; 0x30
    196e:	00 97       	sbiw	r24, 0x00	; 0
    1970:	69 f7       	brne	.-38     	; 0x194c <LCD_displayCharacter+0xbe>
    1972:	14 c0       	rjmp	.+40     	; 0x199c <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1974:	69 a9       	ldd	r22, Y+49	; 0x31
    1976:	7a a9       	ldd	r23, Y+50	; 0x32
    1978:	8b a9       	ldd	r24, Y+51	; 0x33
    197a:	9c a9       	ldd	r25, Y+52	; 0x34
    197c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	98 ab       	std	Y+48, r25	; 0x30
    1986:	8f a7       	std	Y+47, r24	; 0x2f
    1988:	8f a5       	ldd	r24, Y+47	; 0x2f
    198a:	98 a9       	ldd	r25, Y+48	; 0x30
    198c:	9c a7       	std	Y+44, r25	; 0x2c
    198e:	8b a7       	std	Y+43, r24	; 0x2b
    1990:	8b a5       	ldd	r24, Y+43	; 0x2b
    1992:	9c a5       	ldd	r25, Y+44	; 0x2c
    1994:	01 97       	sbiw	r24, 0x01	; 1
    1996:	f1 f7       	brne	.-4      	; 0x1994 <LCD_displayCharacter+0x106>
    1998:	9c a7       	std	Y+44, r25	; 0x2c
    199a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    199c:	82 e0       	ldi	r24, 0x02	; 2
    199e:	65 e0       	ldi	r22, 0x05	; 5
    19a0:	41 e0       	ldi	r20, 0x01	; 1
    19a2:	0e 94 dd 07 	call	0xfba	; 0xfba <GPIO_writePin>
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	a0 e8       	ldi	r26, 0x80	; 128
    19ac:	bf e3       	ldi	r27, 0x3F	; 63
    19ae:	8f a3       	std	Y+39, r24	; 0x27
    19b0:	98 a7       	std	Y+40, r25	; 0x28
    19b2:	a9 a7       	std	Y+41, r26	; 0x29
    19b4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19b6:	6f a1       	ldd	r22, Y+39	; 0x27
    19b8:	78 a5       	ldd	r23, Y+40	; 0x28
    19ba:	89 a5       	ldd	r24, Y+41	; 0x29
    19bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	4a e7       	ldi	r20, 0x7A	; 122
    19c4:	53 e4       	ldi	r21, 0x43	; 67
    19c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    19ce:	8b a3       	std	Y+35, r24	; 0x23
    19d0:	9c a3       	std	Y+36, r25	; 0x24
    19d2:	ad a3       	std	Y+37, r26	; 0x25
    19d4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    19d6:	6b a1       	ldd	r22, Y+35	; 0x23
    19d8:	7c a1       	ldd	r23, Y+36	; 0x24
    19da:	8d a1       	ldd	r24, Y+37	; 0x25
    19dc:	9e a1       	ldd	r25, Y+38	; 0x26
    19de:	20 e0       	ldi	r18, 0x00	; 0
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	40 e8       	ldi	r20, 0x80	; 128
    19e4:	5f e3       	ldi	r21, 0x3F	; 63
    19e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19ea:	88 23       	and	r24, r24
    19ec:	2c f4       	brge	.+10     	; 0x19f8 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	9a a3       	std	Y+34, r25	; 0x22
    19f4:	89 a3       	std	Y+33, r24	; 0x21
    19f6:	3f c0       	rjmp	.+126    	; 0x1a76 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    19f8:	6b a1       	ldd	r22, Y+35	; 0x23
    19fa:	7c a1       	ldd	r23, Y+36	; 0x24
    19fc:	8d a1       	ldd	r24, Y+37	; 0x25
    19fe:	9e a1       	ldd	r25, Y+38	; 0x26
    1a00:	20 e0       	ldi	r18, 0x00	; 0
    1a02:	3f ef       	ldi	r19, 0xFF	; 255
    1a04:	4f e7       	ldi	r20, 0x7F	; 127
    1a06:	57 e4       	ldi	r21, 0x47	; 71
    1a08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a0c:	18 16       	cp	r1, r24
    1a0e:	4c f5       	brge	.+82     	; 0x1a62 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a10:	6f a1       	ldd	r22, Y+39	; 0x27
    1a12:	78 a5       	ldd	r23, Y+40	; 0x28
    1a14:	89 a5       	ldd	r24, Y+41	; 0x29
    1a16:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a18:	20 e0       	ldi	r18, 0x00	; 0
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	40 e2       	ldi	r20, 0x20	; 32
    1a1e:	51 e4       	ldi	r21, 0x41	; 65
    1a20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a24:	dc 01       	movw	r26, r24
    1a26:	cb 01       	movw	r24, r22
    1a28:	bc 01       	movw	r22, r24
    1a2a:	cd 01       	movw	r24, r26
    1a2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a30:	dc 01       	movw	r26, r24
    1a32:	cb 01       	movw	r24, r22
    1a34:	9a a3       	std	Y+34, r25	; 0x22
    1a36:	89 a3       	std	Y+33, r24	; 0x21
    1a38:	0f c0       	rjmp	.+30     	; 0x1a58 <LCD_displayCharacter+0x1ca>
    1a3a:	89 e1       	ldi	r24, 0x19	; 25
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	98 a3       	std	Y+32, r25	; 0x20
    1a40:	8f 8f       	std	Y+31, r24	; 0x1f
    1a42:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a44:	98 a1       	ldd	r25, Y+32	; 0x20
    1a46:	01 97       	sbiw	r24, 0x01	; 1
    1a48:	f1 f7       	brne	.-4      	; 0x1a46 <LCD_displayCharacter+0x1b8>
    1a4a:	98 a3       	std	Y+32, r25	; 0x20
    1a4c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a4e:	89 a1       	ldd	r24, Y+33	; 0x21
    1a50:	9a a1       	ldd	r25, Y+34	; 0x22
    1a52:	01 97       	sbiw	r24, 0x01	; 1
    1a54:	9a a3       	std	Y+34, r25	; 0x22
    1a56:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a58:	89 a1       	ldd	r24, Y+33	; 0x21
    1a5a:	9a a1       	ldd	r25, Y+34	; 0x22
    1a5c:	00 97       	sbiw	r24, 0x00	; 0
    1a5e:	69 f7       	brne	.-38     	; 0x1a3a <LCD_displayCharacter+0x1ac>
    1a60:	14 c0       	rjmp	.+40     	; 0x1a8a <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a62:	6b a1       	ldd	r22, Y+35	; 0x23
    1a64:	7c a1       	ldd	r23, Y+36	; 0x24
    1a66:	8d a1       	ldd	r24, Y+37	; 0x25
    1a68:	9e a1       	ldd	r25, Y+38	; 0x26
    1a6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a6e:	dc 01       	movw	r26, r24
    1a70:	cb 01       	movw	r24, r22
    1a72:	9a a3       	std	Y+34, r25	; 0x22
    1a74:	89 a3       	std	Y+33, r24	; 0x21
    1a76:	89 a1       	ldd	r24, Y+33	; 0x21
    1a78:	9a a1       	ldd	r25, Y+34	; 0x22
    1a7a:	9e 8f       	std	Y+30, r25	; 0x1e
    1a7c:	8d 8f       	std	Y+29, r24	; 0x1d
    1a7e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a80:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a82:	01 97       	sbiw	r24, 0x01	; 1
    1a84:	f1 f7       	brne	.-4      	; 0x1a82 <LCD_displayCharacter+0x1f4>
    1a86:	9e 8f       	std	Y+30, r25	; 0x1e
    1a88:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1a8a:	83 e0       	ldi	r24, 0x03	; 3
    1a8c:	69 ad       	ldd	r22, Y+57	; 0x39
    1a8e:	0e 94 a7 09 	call	0x134e	; 0x134e <GPIO_writePort>
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	a0 e8       	ldi	r26, 0x80	; 128
    1a98:	bf e3       	ldi	r27, 0x3F	; 63
    1a9a:	89 8f       	std	Y+25, r24	; 0x19
    1a9c:	9a 8f       	std	Y+26, r25	; 0x1a
    1a9e:	ab 8f       	std	Y+27, r26	; 0x1b
    1aa0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa2:	69 8d       	ldd	r22, Y+25	; 0x19
    1aa4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1aa6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1aa8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	4a e7       	ldi	r20, 0x7A	; 122
    1ab0:	53 e4       	ldi	r21, 0x43	; 67
    1ab2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	cb 01       	movw	r24, r22
    1aba:	8d 8b       	std	Y+21, r24	; 0x15
    1abc:	9e 8b       	std	Y+22, r25	; 0x16
    1abe:	af 8b       	std	Y+23, r26	; 0x17
    1ac0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ac2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ac4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ac6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ac8:	98 8d       	ldd	r25, Y+24	; 0x18
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	40 e8       	ldi	r20, 0x80	; 128
    1ad0:	5f e3       	ldi	r21, 0x3F	; 63
    1ad2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ad6:	88 23       	and	r24, r24
    1ad8:	2c f4       	brge	.+10     	; 0x1ae4 <LCD_displayCharacter+0x256>
		__ticks = 1;
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	9c 8b       	std	Y+20, r25	; 0x14
    1ae0:	8b 8b       	std	Y+19, r24	; 0x13
    1ae2:	3f c0       	rjmp	.+126    	; 0x1b62 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    1ae4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ae6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ae8:	8f 89       	ldd	r24, Y+23	; 0x17
    1aea:	98 8d       	ldd	r25, Y+24	; 0x18
    1aec:	20 e0       	ldi	r18, 0x00	; 0
    1aee:	3f ef       	ldi	r19, 0xFF	; 255
    1af0:	4f e7       	ldi	r20, 0x7F	; 127
    1af2:	57 e4       	ldi	r21, 0x47	; 71
    1af4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1af8:	18 16       	cp	r1, r24
    1afa:	4c f5       	brge	.+82     	; 0x1b4e <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1afc:	69 8d       	ldd	r22, Y+25	; 0x19
    1afe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	40 e2       	ldi	r20, 0x20	; 32
    1b0a:	51 e4       	ldi	r21, 0x41	; 65
    1b0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	bc 01       	movw	r22, r24
    1b16:	cd 01       	movw	r24, r26
    1b18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	9c 8b       	std	Y+20, r25	; 0x14
    1b22:	8b 8b       	std	Y+19, r24	; 0x13
    1b24:	0f c0       	rjmp	.+30     	; 0x1b44 <LCD_displayCharacter+0x2b6>
    1b26:	89 e1       	ldi	r24, 0x19	; 25
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	9a 8b       	std	Y+18, r25	; 0x12
    1b2c:	89 8b       	std	Y+17, r24	; 0x11
    1b2e:	89 89       	ldd	r24, Y+17	; 0x11
    1b30:	9a 89       	ldd	r25, Y+18	; 0x12
    1b32:	01 97       	sbiw	r24, 0x01	; 1
    1b34:	f1 f7       	brne	.-4      	; 0x1b32 <LCD_displayCharacter+0x2a4>
    1b36:	9a 8b       	std	Y+18, r25	; 0x12
    1b38:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b3a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b3c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b3e:	01 97       	sbiw	r24, 0x01	; 1
    1b40:	9c 8b       	std	Y+20, r25	; 0x14
    1b42:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b44:	8b 89       	ldd	r24, Y+19	; 0x13
    1b46:	9c 89       	ldd	r25, Y+20	; 0x14
    1b48:	00 97       	sbiw	r24, 0x00	; 0
    1b4a:	69 f7       	brne	.-38     	; 0x1b26 <LCD_displayCharacter+0x298>
    1b4c:	14 c0       	rjmp	.+40     	; 0x1b76 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b4e:	6d 89       	ldd	r22, Y+21	; 0x15
    1b50:	7e 89       	ldd	r23, Y+22	; 0x16
    1b52:	8f 89       	ldd	r24, Y+23	; 0x17
    1b54:	98 8d       	ldd	r25, Y+24	; 0x18
    1b56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b5a:	dc 01       	movw	r26, r24
    1b5c:	cb 01       	movw	r24, r22
    1b5e:	9c 8b       	std	Y+20, r25	; 0x14
    1b60:	8b 8b       	std	Y+19, r24	; 0x13
    1b62:	8b 89       	ldd	r24, Y+19	; 0x13
    1b64:	9c 89       	ldd	r25, Y+20	; 0x14
    1b66:	98 8b       	std	Y+16, r25	; 0x10
    1b68:	8f 87       	std	Y+15, r24	; 0x0f
    1b6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b6c:	98 89       	ldd	r25, Y+16	; 0x10
    1b6e:	01 97       	sbiw	r24, 0x01	; 1
    1b70:	f1 f7       	brne	.-4      	; 0x1b6e <LCD_displayCharacter+0x2e0>
    1b72:	98 8b       	std	Y+16, r25	; 0x10
    1b74:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1b76:	82 e0       	ldi	r24, 0x02	; 2
    1b78:	65 e0       	ldi	r22, 0x05	; 5
    1b7a:	40 e0       	ldi	r20, 0x00	; 0
    1b7c:	0e 94 dd 07 	call	0xfba	; 0xfba <GPIO_writePin>
    1b80:	80 e0       	ldi	r24, 0x00	; 0
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	a0 e8       	ldi	r26, 0x80	; 128
    1b86:	bf e3       	ldi	r27, 0x3F	; 63
    1b88:	8b 87       	std	Y+11, r24	; 0x0b
    1b8a:	9c 87       	std	Y+12, r25	; 0x0c
    1b8c:	ad 87       	std	Y+13, r26	; 0x0d
    1b8e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b90:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b92:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b96:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	4a e7       	ldi	r20, 0x7A	; 122
    1b9e:	53 e4       	ldi	r21, 0x43	; 67
    1ba0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	cb 01       	movw	r24, r22
    1ba8:	8f 83       	std	Y+7, r24	; 0x07
    1baa:	98 87       	std	Y+8, r25	; 0x08
    1bac:	a9 87       	std	Y+9, r26	; 0x09
    1bae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bb0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb2:	78 85       	ldd	r23, Y+8	; 0x08
    1bb4:	89 85       	ldd	r24, Y+9	; 0x09
    1bb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	40 e8       	ldi	r20, 0x80	; 128
    1bbe:	5f e3       	ldi	r21, 0x3F	; 63
    1bc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bc4:	88 23       	and	r24, r24
    1bc6:	2c f4       	brge	.+10     	; 0x1bd2 <LCD_displayCharacter+0x344>
		__ticks = 1;
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	9e 83       	std	Y+6, r25	; 0x06
    1bce:	8d 83       	std	Y+5, r24	; 0x05
    1bd0:	3f c0       	rjmp	.+126    	; 0x1c50 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    1bd2:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd4:	78 85       	ldd	r23, Y+8	; 0x08
    1bd6:	89 85       	ldd	r24, Y+9	; 0x09
    1bd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bda:	20 e0       	ldi	r18, 0x00	; 0
    1bdc:	3f ef       	ldi	r19, 0xFF	; 255
    1bde:	4f e7       	ldi	r20, 0x7F	; 127
    1be0:	57 e4       	ldi	r21, 0x47	; 71
    1be2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1be6:	18 16       	cp	r1, r24
    1be8:	4c f5       	brge	.+82     	; 0x1c3c <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bea:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bec:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bee:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bf0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	40 e2       	ldi	r20, 0x20	; 32
    1bf8:	51 e4       	ldi	r21, 0x41	; 65
    1bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfe:	dc 01       	movw	r26, r24
    1c00:	cb 01       	movw	r24, r22
    1c02:	bc 01       	movw	r22, r24
    1c04:	cd 01       	movw	r24, r26
    1c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	cb 01       	movw	r24, r22
    1c0e:	9e 83       	std	Y+6, r25	; 0x06
    1c10:	8d 83       	std	Y+5, r24	; 0x05
    1c12:	0f c0       	rjmp	.+30     	; 0x1c32 <LCD_displayCharacter+0x3a4>
    1c14:	89 e1       	ldi	r24, 0x19	; 25
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	9c 83       	std	Y+4, r25	; 0x04
    1c1a:	8b 83       	std	Y+3, r24	; 0x03
    1c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c20:	01 97       	sbiw	r24, 0x01	; 1
    1c22:	f1 f7       	brne	.-4      	; 0x1c20 <LCD_displayCharacter+0x392>
    1c24:	9c 83       	std	Y+4, r25	; 0x04
    1c26:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c28:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c2c:	01 97       	sbiw	r24, 0x01	; 1
    1c2e:	9e 83       	std	Y+6, r25	; 0x06
    1c30:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c32:	8d 81       	ldd	r24, Y+5	; 0x05
    1c34:	9e 81       	ldd	r25, Y+6	; 0x06
    1c36:	00 97       	sbiw	r24, 0x00	; 0
    1c38:	69 f7       	brne	.-38     	; 0x1c14 <LCD_displayCharacter+0x386>
    1c3a:	14 c0       	rjmp	.+40     	; 0x1c64 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c3e:	78 85       	ldd	r23, Y+8	; 0x08
    1c40:	89 85       	ldd	r24, Y+9	; 0x09
    1c42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c48:	dc 01       	movw	r26, r24
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	9e 83       	std	Y+6, r25	; 0x06
    1c4e:	8d 83       	std	Y+5, r24	; 0x05
    1c50:	8d 81       	ldd	r24, Y+5	; 0x05
    1c52:	9e 81       	ldd	r25, Y+6	; 0x06
    1c54:	9a 83       	std	Y+2, r25	; 0x02
    1c56:	89 83       	std	Y+1, r24	; 0x01
    1c58:	89 81       	ldd	r24, Y+1	; 0x01
    1c5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c5c:	01 97       	sbiw	r24, 0x01	; 1
    1c5e:	f1 f7       	brne	.-4      	; 0x1c5c <LCD_displayCharacter+0x3ce>
    1c60:	9a 83       	std	Y+2, r25	; 0x02
    1c62:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1c64:	e9 96       	adiw	r28, 0x39	; 57
    1c66:	0f b6       	in	r0, 0x3f	; 63
    1c68:	f8 94       	cli
    1c6a:	de bf       	out	0x3e, r29	; 62
    1c6c:	0f be       	out	0x3f, r0	; 63
    1c6e:	cd bf       	out	0x3d, r28	; 61
    1c70:	cf 91       	pop	r28
    1c72:	df 91       	pop	r29
    1c74:	08 95       	ret

00001c76 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1c76:	df 93       	push	r29
    1c78:	cf 93       	push	r28
    1c7a:	00 d0       	rcall	.+0      	; 0x1c7c <LCD_displayString+0x6>
    1c7c:	0f 92       	push	r0
    1c7e:	cd b7       	in	r28, 0x3d	; 61
    1c80:	de b7       	in	r29, 0x3e	; 62
    1c82:	9b 83       	std	Y+3, r25	; 0x03
    1c84:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1c86:	19 82       	std	Y+1, r1	; 0x01
    1c88:	0e c0       	rjmp	.+28     	; 0x1ca6 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1c8a:	89 81       	ldd	r24, Y+1	; 0x01
    1c8c:	28 2f       	mov	r18, r24
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	8a 81       	ldd	r24, Y+2	; 0x02
    1c92:	9b 81       	ldd	r25, Y+3	; 0x03
    1c94:	fc 01       	movw	r30, r24
    1c96:	e2 0f       	add	r30, r18
    1c98:	f3 1f       	adc	r31, r19
    1c9a:	80 81       	ld	r24, Z
    1c9c:	0e 94 47 0c 	call	0x188e	; 0x188e <LCD_displayCharacter>
		i++;
    1ca0:	89 81       	ldd	r24, Y+1	; 0x01
    1ca2:	8f 5f       	subi	r24, 0xFF	; 255
    1ca4:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1ca6:	89 81       	ldd	r24, Y+1	; 0x01
    1ca8:	28 2f       	mov	r18, r24
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	8a 81       	ldd	r24, Y+2	; 0x02
    1cae:	9b 81       	ldd	r25, Y+3	; 0x03
    1cb0:	fc 01       	movw	r30, r24
    1cb2:	e2 0f       	add	r30, r18
    1cb4:	f3 1f       	adc	r31, r19
    1cb6:	80 81       	ld	r24, Z
    1cb8:	88 23       	and	r24, r24
    1cba:	39 f7       	brne	.-50     	; 0x1c8a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1cbc:	0f 90       	pop	r0
    1cbe:	0f 90       	pop	r0
    1cc0:	0f 90       	pop	r0
    1cc2:	cf 91       	pop	r28
    1cc4:	df 91       	pop	r29
    1cc6:	08 95       	ret

00001cc8 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1cc8:	df 93       	push	r29
    1cca:	cf 93       	push	r28
    1ccc:	00 d0       	rcall	.+0      	; 0x1cce <LCD_moveCursor+0x6>
    1cce:	00 d0       	rcall	.+0      	; 0x1cd0 <LCD_moveCursor+0x8>
    1cd0:	0f 92       	push	r0
    1cd2:	cd b7       	in	r28, 0x3d	; 61
    1cd4:	de b7       	in	r29, 0x3e	; 62
    1cd6:	8a 83       	std	Y+2, r24	; 0x02
    1cd8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1cda:	8a 81       	ldd	r24, Y+2	; 0x02
    1cdc:	28 2f       	mov	r18, r24
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	3d 83       	std	Y+5, r19	; 0x05
    1ce2:	2c 83       	std	Y+4, r18	; 0x04
    1ce4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ce8:	81 30       	cpi	r24, 0x01	; 1
    1cea:	91 05       	cpc	r25, r1
    1cec:	c1 f0       	breq	.+48     	; 0x1d1e <LCD_moveCursor+0x56>
    1cee:	2c 81       	ldd	r18, Y+4	; 0x04
    1cf0:	3d 81       	ldd	r19, Y+5	; 0x05
    1cf2:	22 30       	cpi	r18, 0x02	; 2
    1cf4:	31 05       	cpc	r19, r1
    1cf6:	2c f4       	brge	.+10     	; 0x1d02 <LCD_moveCursor+0x3a>
    1cf8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cfa:	9d 81       	ldd	r25, Y+5	; 0x05
    1cfc:	00 97       	sbiw	r24, 0x00	; 0
    1cfe:	61 f0       	breq	.+24     	; 0x1d18 <LCD_moveCursor+0x50>
    1d00:	19 c0       	rjmp	.+50     	; 0x1d34 <LCD_moveCursor+0x6c>
    1d02:	2c 81       	ldd	r18, Y+4	; 0x04
    1d04:	3d 81       	ldd	r19, Y+5	; 0x05
    1d06:	22 30       	cpi	r18, 0x02	; 2
    1d08:	31 05       	cpc	r19, r1
    1d0a:	69 f0       	breq	.+26     	; 0x1d26 <LCD_moveCursor+0x5e>
    1d0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d0e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d10:	83 30       	cpi	r24, 0x03	; 3
    1d12:	91 05       	cpc	r25, r1
    1d14:	61 f0       	breq	.+24     	; 0x1d2e <LCD_moveCursor+0x66>
    1d16:	0e c0       	rjmp	.+28     	; 0x1d34 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1d18:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1a:	89 83       	std	Y+1, r24	; 0x01
    1d1c:	0b c0       	rjmp	.+22     	; 0x1d34 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d20:	80 5c       	subi	r24, 0xC0	; 192
    1d22:	89 83       	std	Y+1, r24	; 0x01
    1d24:	07 c0       	rjmp	.+14     	; 0x1d34 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1d26:	8b 81       	ldd	r24, Y+3	; 0x03
    1d28:	80 5f       	subi	r24, 0xF0	; 240
    1d2a:	89 83       	std	Y+1, r24	; 0x01
    1d2c:	03 c0       	rjmp	.+6      	; 0x1d34 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d30:	80 5b       	subi	r24, 0xB0	; 176
    1d32:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	80 68       	ori	r24, 0x80	; 128
    1d38:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <LCD_sendCommand>
}
    1d3c:	0f 90       	pop	r0
    1d3e:	0f 90       	pop	r0
    1d40:	0f 90       	pop	r0
    1d42:	0f 90       	pop	r0
    1d44:	0f 90       	pop	r0
    1d46:	cf 91       	pop	r28
    1d48:	df 91       	pop	r29
    1d4a:	08 95       	ret

00001d4c <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1d4c:	df 93       	push	r29
    1d4e:	cf 93       	push	r28
    1d50:	00 d0       	rcall	.+0      	; 0x1d52 <LCD_displayStringRowColumn+0x6>
    1d52:	00 d0       	rcall	.+0      	; 0x1d54 <LCD_displayStringRowColumn+0x8>
    1d54:	cd b7       	in	r28, 0x3d	; 61
    1d56:	de b7       	in	r29, 0x3e	; 62
    1d58:	89 83       	std	Y+1, r24	; 0x01
    1d5a:	6a 83       	std	Y+2, r22	; 0x02
    1d5c:	5c 83       	std	Y+4, r21	; 0x04
    1d5e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1d60:	89 81       	ldd	r24, Y+1	; 0x01
    1d62:	6a 81       	ldd	r22, Y+2	; 0x02
    1d64:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1d68:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d6c:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <LCD_displayString>
}
    1d70:	0f 90       	pop	r0
    1d72:	0f 90       	pop	r0
    1d74:	0f 90       	pop	r0
    1d76:	0f 90       	pop	r0
    1d78:	cf 91       	pop	r28
    1d7a:	df 91       	pop	r29
    1d7c:	08 95       	ret

00001d7e <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1d7e:	df 93       	push	r29
    1d80:	cf 93       	push	r28
    1d82:	cd b7       	in	r28, 0x3d	; 61
    1d84:	de b7       	in	r29, 0x3e	; 62
    1d86:	62 97       	sbiw	r28, 0x12	; 18
    1d88:	0f b6       	in	r0, 0x3f	; 63
    1d8a:	f8 94       	cli
    1d8c:	de bf       	out	0x3e, r29	; 62
    1d8e:	0f be       	out	0x3f, r0	; 63
    1d90:	cd bf       	out	0x3d, r28	; 61
    1d92:	9a 8b       	std	Y+18, r25	; 0x12
    1d94:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1d96:	89 89       	ldd	r24, Y+17	; 0x11
    1d98:	9a 89       	ldd	r25, Y+18	; 0x12
    1d9a:	9e 01       	movw	r18, r28
    1d9c:	2f 5f       	subi	r18, 0xFF	; 255
    1d9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1da0:	b9 01       	movw	r22, r18
    1da2:	4a e0       	ldi	r20, 0x0A	; 10
    1da4:	50 e0       	ldi	r21, 0x00	; 0
    1da6:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <itoa>
   LCD_displayString(buff); /* Display the string */
    1daa:	ce 01       	movw	r24, r28
    1dac:	01 96       	adiw	r24, 0x01	; 1
    1dae:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <LCD_displayString>
}
    1db2:	62 96       	adiw	r28, 0x12	; 18
    1db4:	0f b6       	in	r0, 0x3f	; 63
    1db6:	f8 94       	cli
    1db8:	de bf       	out	0x3e, r29	; 62
    1dba:	0f be       	out	0x3f, r0	; 63
    1dbc:	cd bf       	out	0x3d, r28	; 61
    1dbe:	cf 91       	pop	r28
    1dc0:	df 91       	pop	r29
    1dc2:	08 95       	ret

00001dc4 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    1dc4:	df 93       	push	r29
    1dc6:	cf 93       	push	r28
    1dc8:	cd b7       	in	r28, 0x3d	; 61
    1dca:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <LCD_sendCommand>
}
    1dd2:	cf 91       	pop	r28
    1dd4:	df 91       	pop	r29
    1dd6:	08 95       	ret

00001dd8 <__prologue_saves__>:
    1dd8:	2f 92       	push	r2
    1dda:	3f 92       	push	r3
    1ddc:	4f 92       	push	r4
    1dde:	5f 92       	push	r5
    1de0:	6f 92       	push	r6
    1de2:	7f 92       	push	r7
    1de4:	8f 92       	push	r8
    1de6:	9f 92       	push	r9
    1de8:	af 92       	push	r10
    1dea:	bf 92       	push	r11
    1dec:	cf 92       	push	r12
    1dee:	df 92       	push	r13
    1df0:	ef 92       	push	r14
    1df2:	ff 92       	push	r15
    1df4:	0f 93       	push	r16
    1df6:	1f 93       	push	r17
    1df8:	cf 93       	push	r28
    1dfa:	df 93       	push	r29
    1dfc:	cd b7       	in	r28, 0x3d	; 61
    1dfe:	de b7       	in	r29, 0x3e	; 62
    1e00:	ca 1b       	sub	r28, r26
    1e02:	db 0b       	sbc	r29, r27
    1e04:	0f b6       	in	r0, 0x3f	; 63
    1e06:	f8 94       	cli
    1e08:	de bf       	out	0x3e, r29	; 62
    1e0a:	0f be       	out	0x3f, r0	; 63
    1e0c:	cd bf       	out	0x3d, r28	; 61
    1e0e:	09 94       	ijmp

00001e10 <__epilogue_restores__>:
    1e10:	2a 88       	ldd	r2, Y+18	; 0x12
    1e12:	39 88       	ldd	r3, Y+17	; 0x11
    1e14:	48 88       	ldd	r4, Y+16	; 0x10
    1e16:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e18:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e1a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e1c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e1e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e20:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e22:	b9 84       	ldd	r11, Y+9	; 0x09
    1e24:	c8 84       	ldd	r12, Y+8	; 0x08
    1e26:	df 80       	ldd	r13, Y+7	; 0x07
    1e28:	ee 80       	ldd	r14, Y+6	; 0x06
    1e2a:	fd 80       	ldd	r15, Y+5	; 0x05
    1e2c:	0c 81       	ldd	r16, Y+4	; 0x04
    1e2e:	1b 81       	ldd	r17, Y+3	; 0x03
    1e30:	aa 81       	ldd	r26, Y+2	; 0x02
    1e32:	b9 81       	ldd	r27, Y+1	; 0x01
    1e34:	ce 0f       	add	r28, r30
    1e36:	d1 1d       	adc	r29, r1
    1e38:	0f b6       	in	r0, 0x3f	; 63
    1e3a:	f8 94       	cli
    1e3c:	de bf       	out	0x3e, r29	; 62
    1e3e:	0f be       	out	0x3f, r0	; 63
    1e40:	cd bf       	out	0x3d, r28	; 61
    1e42:	ed 01       	movw	r28, r26
    1e44:	08 95       	ret

00001e46 <itoa>:
    1e46:	fb 01       	movw	r30, r22
    1e48:	9f 01       	movw	r18, r30
    1e4a:	e8 94       	clt
    1e4c:	42 30       	cpi	r20, 0x02	; 2
    1e4e:	c4 f0       	brlt	.+48     	; 0x1e80 <itoa+0x3a>
    1e50:	45 32       	cpi	r20, 0x25	; 37
    1e52:	b4 f4       	brge	.+44     	; 0x1e80 <itoa+0x3a>
    1e54:	4a 30       	cpi	r20, 0x0A	; 10
    1e56:	29 f4       	brne	.+10     	; 0x1e62 <itoa+0x1c>
    1e58:	97 fb       	bst	r25, 7
    1e5a:	1e f4       	brtc	.+6      	; 0x1e62 <itoa+0x1c>
    1e5c:	90 95       	com	r25
    1e5e:	81 95       	neg	r24
    1e60:	9f 4f       	sbci	r25, 0xFF	; 255
    1e62:	64 2f       	mov	r22, r20
    1e64:	77 27       	eor	r23, r23
    1e66:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <__udivmodhi4>
    1e6a:	80 5d       	subi	r24, 0xD0	; 208
    1e6c:	8a 33       	cpi	r24, 0x3A	; 58
    1e6e:	0c f0       	brlt	.+2      	; 0x1e72 <itoa+0x2c>
    1e70:	89 5d       	subi	r24, 0xD9	; 217
    1e72:	81 93       	st	Z+, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	00 97       	sbiw	r24, 0x00	; 0
    1e78:	a1 f7       	brne	.-24     	; 0x1e62 <itoa+0x1c>
    1e7a:	16 f4       	brtc	.+4      	; 0x1e80 <itoa+0x3a>
    1e7c:	5d e2       	ldi	r21, 0x2D	; 45
    1e7e:	51 93       	st	Z+, r21
    1e80:	10 82       	st	Z, r1
    1e82:	c9 01       	movw	r24, r18
    1e84:	0c 94 44 0f 	jmp	0x1e88	; 0x1e88 <strrev>

00001e88 <strrev>:
    1e88:	dc 01       	movw	r26, r24
    1e8a:	fc 01       	movw	r30, r24
    1e8c:	67 2f       	mov	r22, r23
    1e8e:	71 91       	ld	r23, Z+
    1e90:	77 23       	and	r23, r23
    1e92:	e1 f7       	brne	.-8      	; 0x1e8c <strrev+0x4>
    1e94:	32 97       	sbiw	r30, 0x02	; 2
    1e96:	04 c0       	rjmp	.+8      	; 0x1ea0 <strrev+0x18>
    1e98:	7c 91       	ld	r23, X
    1e9a:	6d 93       	st	X+, r22
    1e9c:	70 83       	st	Z, r23
    1e9e:	62 91       	ld	r22, -Z
    1ea0:	ae 17       	cp	r26, r30
    1ea2:	bf 07       	cpc	r27, r31
    1ea4:	c8 f3       	brcs	.-14     	; 0x1e98 <strrev+0x10>
    1ea6:	08 95       	ret

00001ea8 <__udivmodhi4>:
    1ea8:	aa 1b       	sub	r26, r26
    1eaa:	bb 1b       	sub	r27, r27
    1eac:	51 e1       	ldi	r21, 0x11	; 17
    1eae:	07 c0       	rjmp	.+14     	; 0x1ebe <__udivmodhi4_ep>

00001eb0 <__udivmodhi4_loop>:
    1eb0:	aa 1f       	adc	r26, r26
    1eb2:	bb 1f       	adc	r27, r27
    1eb4:	a6 17       	cp	r26, r22
    1eb6:	b7 07       	cpc	r27, r23
    1eb8:	10 f0       	brcs	.+4      	; 0x1ebe <__udivmodhi4_ep>
    1eba:	a6 1b       	sub	r26, r22
    1ebc:	b7 0b       	sbc	r27, r23

00001ebe <__udivmodhi4_ep>:
    1ebe:	88 1f       	adc	r24, r24
    1ec0:	99 1f       	adc	r25, r25
    1ec2:	5a 95       	dec	r21
    1ec4:	a9 f7       	brne	.-22     	; 0x1eb0 <__udivmodhi4_loop>
    1ec6:	80 95       	com	r24
    1ec8:	90 95       	com	r25
    1eca:	bc 01       	movw	r22, r24
    1ecc:	cd 01       	movw	r24, r26
    1ece:	08 95       	ret

00001ed0 <_exit>:
    1ed0:	f8 94       	cli

00001ed2 <__stop_program>:
    1ed2:	ff cf       	rjmp	.-2      	; 0x1ed2 <__stop_program>
